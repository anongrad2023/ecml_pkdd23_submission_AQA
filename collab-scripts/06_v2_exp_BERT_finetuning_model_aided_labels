{"cells":[{"cell_type":"markdown","metadata":{"id":"H-WxazjxN4H_"},"source":["# Overview"]},{"cell_type":"markdown","metadata":{"id":"FCGcgd0vIAFr"},"source":["This is the same experiment as 06_v1, but now using the DataLoader class to ensure we are properly handling all elements of the test/train/validation split, as well as handling of randomizing batches between epochs. "]},{"cell_type":"markdown","metadata":{"id":"AbeAB8Hokb-2"},"source":["# Setup"]},{"cell_type":"markdown","metadata":{"id":"ybu8iEZskb-3"},"source":["## Imports"]},{"cell_type":"code","execution_count":35,"metadata":{"id":"JiAEt7P6kb-3","executionInfo":{"status":"ok","timestamp":1676416045757,"user_tz":300,"elapsed":103,"user":{"displayName":"Bill Power","userId":"17299628813846429758"}}},"outputs":[],"source":["import os\n","import numpy as np\n","import pandas as pd\n","from sklearn.model_selection import train_test_split\n","from sklearn.linear_model import LogisticRegression\n","from sklearn.model_selection import GridSearchCV\n","from sklearn.model_selection import cross_val_score\n","import torch\n","import random\n","import warnings\n","warnings.filterwarnings('ignore')\n","\n","from tqdm.notebook import tqdm\n","import pickle"]},{"cell_type":"markdown","metadata":{"id":"0fSMAjHpkb-4"},"source":["## Constants"]},{"cell_type":"code","execution_count":36,"metadata":{"id":"UNU4HLNZkb-5","executionInfo":{"status":"ok","timestamp":1676416045954,"user_tz":300,"elapsed":9,"user":{"displayName":"Bill Power","userId":"17299628813846429758"}}},"outputs":[],"source":["RESULTS_FN_SLUG = \"AQA06_v2_02_results\"\n","\n","GCS_APP_ID = \"aqa-research\"\n","GCS_BUCKET = \"dabi-aqa-data-00\"\n","\n","FN_QUESTIONS = \"questions_01.csv\"\n","FN_CONTEXTS  = \"contexts_01.csv\"\n","\n","FN_A2_RAW = \"a2_raw.csv\"\n","FN_A2_FA  = \"a2_gs.csv\"\n","FN_A3_FA  = \"a3_gs.csv\"\n","FN_A3_MAJ = \"a3_con.csv\"\n","\n","MAX_SEQ_LEN = 128\n","\n","EPOCHS = 100\n","BATCH_SIZE = 16\n","TEST_FRAC = 0.1\n","\n","RAND_SEED = 4242"]},{"cell_type":"markdown","metadata":{"id":"glKP3nrhkb-6"},"source":["## GCS Auth - Input Needed"]},{"cell_type":"code","execution_count":37,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":15417,"status":"ok","timestamp":1676416061366,"user":{"displayName":"Bill Power","userId":"17299628813846429758"},"user_tz":300},"id":"xwxl9-b4kb-7","outputId":"9b2ea78d-2731-4b6f-9926-2639fe23a371"},"outputs":[{"output_type":"stream","name":"stdout","text":["Go to the following link in your browser:\n","\n","    https://accounts.google.com/o/oauth2/auth?response_type=code&client_id=32555940559.apps.googleusercontent.com&redirect_uri=https%3A%2F%2Fsdk.cloud.google.com%2Fauthcode.html&scope=openid+https%3A%2F%2Fwww.googleapis.com%2Fauth%2Fuserinfo.email+https%3A%2F%2Fwww.googleapis.com%2Fauth%2Fcloud-platform+https%3A%2F%2Fwww.googleapis.com%2Fauth%2Fappengine.admin+https%3A%2F%2Fwww.googleapis.com%2Fauth%2Fsqlservice.login+https%3A%2F%2Fwww.googleapis.com%2Fauth%2Fcompute+https%3A%2F%2Fwww.googleapis.com%2Fauth%2Faccounts.reauth&state=KbucxmmhqPvvnEFY3A0DZcfDhXQ0j2&prompt=consent&access_type=offline&code_challenge=B-bj7u3eyjRc-pzsQXWMlsqAfuZTQ2j65E9eLtuAl0o&code_challenge_method=S256\n","\n","Enter authorization code: 4/0AWtgzh5Xi1v_xG0TOUR4URwEfoRNZBLMgqhCC_VK4mnlqeGIeHyetNK3j-27BlO4zg_Pjw\n","\n","You are now logged in as [willpowe@gmail.com].\n","Your current project is [aqa-research].  You can change this setting by running:\n","  $ gcloud config set project PROJECT_ID\n"]}],"source":["!gcloud auth login --launch-browser"]},{"cell_type":"code","execution_count":38,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":723,"status":"ok","timestamp":1676416062065,"user":{"displayName":"Bill Power","userId":"17299628813846429758"},"user_tz":300},"id":"SEQdfjlikb-7","outputId":"15f0ddb5-c6a9-41df-f988-c4d0c4de2fb7"},"outputs":[{"output_type":"stream","name":"stdout","text":["Updated property [core/project].\n"]}],"source":["!gcloud config set project {GCS_APP_ID}"]},{"cell_type":"code","execution_count":39,"metadata":{"id":"1x_hDs2gkb-8","executionInfo":{"status":"ok","timestamp":1676416062066,"user_tz":300,"elapsed":12,"user":{"displayName":"Bill Power","userId":"17299628813846429758"}}},"outputs":[],"source":["def download_file_from_gcs(src_fn, dest_fn):\n","  dest = f\"/content/{dest_fn}\"\n","  dl_command = f\"gsutil -m cp gs://{GCS_BUCKET}/{src_fn} {dest}\"\n","  os.system(dl_command)\n","\n","def upload_file_to_gcs(src_fn, dest_fn):\n","  dest_url = \"{}/{}\".format(GCS_BUCKET, dest_fn)\n","  ul_command = \"gsutil -m cp {} gs://{}\".format(src_fn, dest_url)\n","  os.system(ul_command)"]},{"cell_type":"markdown","metadata":{"id":"Df9iIZyhkb--"},"source":["## Raw Data"]},{"cell_type":"code","execution_count":40,"metadata":{"id":"YOIG4PnXkb-_","executionInfo":{"status":"ok","timestamp":1676416072411,"user_tz":300,"elapsed":10353,"user":{"displayName":"Bill Power","userId":"17299628813846429758"}}},"outputs":[],"source":["download_file_from_gcs(FN_QUESTIONS, FN_QUESTIONS)\n","download_file_from_gcs(FN_CONTEXTS, FN_CONTEXTS)\n","\n","download_file_from_gcs(FN_A2_RAW, FN_A2_RAW)\n","download_file_from_gcs(FN_A2_FA, FN_A2_FA)\n","download_file_from_gcs(FN_A3_FA, FN_A3_FA)\n","download_file_from_gcs(FN_A3_MAJ, FN_A3_MAJ)"]},{"cell_type":"markdown","metadata":{"id":"tzRLOi-Jkb-_"},"source":["## BERT Setup"]},{"cell_type":"code","execution_count":41,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":3541,"status":"ok","timestamp":1676416075927,"user":{"displayName":"Bill Power","userId":"17299628813846429758"},"user_tz":300},"id":"C_lWu_g_kb_A","outputId":"3612f824-c5c2-418c-cc58-7dbebc705136"},"outputs":[{"output_type":"stream","name":"stdout","text":["Looking in indexes: https://pypi.org/simple, https://us-python.pkg.dev/colab-wheels/public/simple/\n","Requirement already satisfied: transformers in /usr/local/lib/python3.8/dist-packages (4.26.1)\n","Requirement already satisfied: tokenizers!=0.11.3,<0.14,>=0.11.1 in /usr/local/lib/python3.8/dist-packages (from transformers) (0.13.2)\n","Requirement already satisfied: huggingface-hub<1.0,>=0.11.0 in /usr/local/lib/python3.8/dist-packages (from transformers) (0.12.0)\n","Requirement already satisfied: numpy>=1.17 in /usr/local/lib/python3.8/dist-packages (from transformers) (1.21.6)\n","Requirement already satisfied: packaging>=20.0 in /usr/local/lib/python3.8/dist-packages (from transformers) (23.0)\n","Requirement already satisfied: filelock in /usr/local/lib/python3.8/dist-packages (from transformers) (3.9.0)\n","Requirement already satisfied: requests in /usr/local/lib/python3.8/dist-packages (from transformers) (2.25.1)\n","Requirement already satisfied: pyyaml>=5.1 in /usr/local/lib/python3.8/dist-packages (from transformers) (6.0)\n","Requirement already satisfied: regex!=2019.12.17 in /usr/local/lib/python3.8/dist-packages (from transformers) (2022.6.2)\n","Requirement already satisfied: tqdm>=4.27 in /usr/local/lib/python3.8/dist-packages (from transformers) (4.64.1)\n","Requirement already satisfied: typing-extensions>=3.7.4.3 in /usr/local/lib/python3.8/dist-packages (from huggingface-hub<1.0,>=0.11.0->transformers) (4.4.0)\n","Requirement already satisfied: idna<3,>=2.5 in /usr/local/lib/python3.8/dist-packages (from requests->transformers) (2.10)\n","Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.8/dist-packages (from requests->transformers) (2022.12.7)\n","Requirement already satisfied: urllib3<1.27,>=1.21.1 in /usr/local/lib/python3.8/dist-packages (from requests->transformers) (1.24.3)\n","Requirement already satisfied: chardet<5,>=3.0.2 in /usr/local/lib/python3.8/dist-packages (from requests->transformers) (4.0.0)\n"]}],"source":["!pip install transformers"]},{"cell_type":"code","execution_count":42,"metadata":{"id":"VA_ZnC0dkb_A","executionInfo":{"status":"ok","timestamp":1676416075929,"user_tz":300,"elapsed":41,"user":{"displayName":"Bill Power","userId":"17299628813846429758"}}},"outputs":[],"source":["import transformers as ppb"]},{"cell_type":"markdown","metadata":{"id":"TBwBOc1LJWSS"},"source":["## Random Seeds"]},{"cell_type":"code","execution_count":43,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":35,"status":"ok","timestamp":1676416075931,"user":{"displayName":"Bill Power","userId":"17299628813846429758"},"user_tz":300},"id":"HNrkkYVqJV62","outputId":"8c38e8f9-e6c0-491a-e760-1b9e5f235eef"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["<torch._C.Generator at 0x7f1db40efb70>"]},"metadata":{},"execution_count":43}],"source":["random.seed(RAND_SEED)\n","np.random.seed(RAND_SEED)\n","torch.manual_seed(RAND_SEED)"]},{"cell_type":"markdown","metadata":{"id":"YEniTxLUPL-K"},"source":["# Data"]},{"cell_type":"markdown","metadata":{"id":"zUUz0lb2yLAg"},"source":["## Content Dataframes"]},{"cell_type":"code","execution_count":44,"metadata":{"id":"WuLRs3tXkb_C","executionInfo":{"status":"ok","timestamp":1676416075933,"user_tz":300,"elapsed":26,"user":{"displayName":"Bill Power","userId":"17299628813846429758"}}},"outputs":[],"source":["questions = pd.read_csv(FN_QUESTIONS)\n","contexts  = pd.read_csv(FN_CONTEXTS)\n","\n","content_a2_raw = pd.read_csv(FN_A2_RAW)\n","content_a2_fa  = pd.read_csv(FN_A2_FA)\n","content_a3_fa  = pd.read_csv(FN_A3_FA)\n","content_a3_maj = pd.read_csv(FN_A3_MAJ)\n","\n","content_a3_majplus = pd.concat([content_a3_fa, content_a3_maj])"]},{"cell_type":"markdown","metadata":{"id":"kNQBRgQkkb_B"},"source":["## Transformer Init\n","\n"]},{"cell_type":"code","execution_count":45,"metadata":{"executionInfo":{"elapsed":133,"status":"ok","timestamp":1676416076045,"user":{"displayName":"Bill Power","userId":"17299628813846429758"},"user_tz":300},"id":"wrotnPAHkb_C"},"outputs":[],"source":["# For DistilBERT:\n","model_class, tokenizer_class, pretrained_weights = (ppb.DistilBertModel, ppb.DistilBertTokenizer, 'distilbert-base-uncased')\n","\n","## Want BERT instead of distilBERT? Uncomment the following line:\n","#model_class, tokenizer_class, pretrained_weights = (ppb.BertModel, ppb.BertTokenizer, 'bert-base-uncased')\n","\n","# TODO - figure out the above for the Q/A model. Might need a different\n","#        enough implementation/approach that it warrents a dif script. \n","#        It takes a masked input for the Q and options for multiple choice? idk. \n","\n","# Load pretrained model/tokenizer\n","tokenizer  = tokenizer_class.from_pretrained(pretrained_weights, truncate=True,)"]},{"cell_type":"markdown","metadata":{"id":"LOr21JIPpm8I"},"source":["## Creating Example Tuples"]},{"cell_type":"markdown","metadata":{"id":"noOpZRP8yXpr"},"source":["### Question/Context Embedding Dicts"]},{"cell_type":"markdown","metadata":{"id":"IOoeD1gRUkyE"},"source":["These two data frames contain all the natural langauge content for the question and context strings. \n","\n","These will be used to build maps so we can quickly find the token sequence and attention mask for each individual context string and question string. This will be used later to build the individual training examples. "]},{"cell_type":"code","execution_count":46,"metadata":{"id":"Ad4YwoEX2otO","executionInfo":{"status":"ok","timestamp":1676416076047,"user_tz":300,"elapsed":13,"user":{"displayName":"Bill Power","userId":"17299628813846429758"}}},"outputs":[],"source":["def build_ts_am_map(df_in, text_col_name, id_col):\n","  ids   = df_in[id_col].values\n","  sents = df_in[text_col_name].values\n","\n","  token_seqs = []\n","  attn_masks = []\n","  id_2_tsam = dict()\n","  for id, sent in zip(ids, sents):\n","    enc_dict = tokenizer.encode_plus(\n","      sent,\n","      add_special_tokens = False,\n","      max_length = MAX_SEQ_LEN, \n","      pad_to_max_length = True,\n","      return_attention_mask = True,\n","      return_tensors = 'pt'\n","    )\n","    id_2_tsam[id] = [enc_dict['input_ids'], enc_dict['attention_mask']]\n","\n","  return id_2_tsam"]},{"cell_type":"code","execution_count":47,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":12,"status":"ok","timestamp":1676416076048,"user":{"displayName":"Bill Power","userId":"17299628813846429758"},"user_tz":300},"id":"5UiFFSXW-5i_","outputId":"1633218c-5276-4920-f829-4c17672bf300"},"outputs":[{"output_type":"stream","name":"stdout","text":["Index(['context_id', 'context_text'], dtype='object')\n"]}],"source":["print(contexts.columns)"]},{"cell_type":"code","execution_count":48,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":149,"status":"ok","timestamp":1676416076188,"user":{"displayName":"Bill Power","userId":"17299628813846429758"},"user_tz":300},"id":"35ukWIxGuq_t","outputId":"4a6a0f60-ee52-486f-e451-4a70e141d8a1"},"outputs":[{"output_type":"stream","name":"stderr","text":["Truncation was not explicitly activated but `max_length` is provided a specific value, please use `truncation=True` to explicitly truncate examples to max length. Defaulting to 'longest_first' truncation strategy. If you encode pairs of sequences (GLUE-style) with the tokenizer you can select this strategy more precisely by providing a specific strategy to `truncation`.\n"]}],"source":["map_q_2_ts_am   = build_ts_am_map(questions, 'question_text', 'question_id')\n","map_ctx_2_ts_am = build_ts_am_map(contexts, 'context_text', 'context_id')"]},{"cell_type":"markdown","metadata":{"id":"Ee2A1EDh0Zgd"},"source":["### Balancing - Over-Sampling Method\n","\n","NOTE - This should work w.o changes? The variable name 'tsam_cnt' just doesn't represent the type of that variable well anymore. It now holds just the string for the context text. "]},{"cell_type":"code","execution_count":49,"metadata":{"id":"g8b-jBO3zaM9","executionInfo":{"status":"ok","timestamp":1676416076189,"user_tz":300,"elapsed":28,"user":{"displayName":"Bill Power","userId":"17299628813846429758"}}},"outputs":[],"source":["def max_size_oversampling_wr(examples):\n","  question_counts = dict()\n","  context_counts  = dict()\n","  \n","  for _, _, _, _, ctx, q in examples:\n","    if q not in question_counts:\n","      question_counts[q] = 0\n","    question_counts[q] += 1\n","    \n","    if ctx not in context_counts:\n","      context_counts[ctx] = 0\n","    context_counts[ctx] += 1\n","\n","  context_examples    = { k: [] for k in context_counts}\n","  context_populations = { k: [] for k in context_counts}\n","\n","  for example in examples:\n","    ctx = example[4] # This might change depending on shape of examples.\n","    context_populations[ctx].append(example)\n","\n","  max_size = 0\n","  for k in context_populations:\n","    size_pop = len(context_populations[k])\n","    if size_pop > max_size:\n","      max_size = size_pop\n","\n","  for k in context_examples:\n","    while len(context_examples[k]) < max_size:\n","      context_examples[k].append(random.sample(context_populations[k], 1)[0])\n","\n","  example_tuples_max_sampled = []\n","  for k in context_examples:\n","    for ex in context_examples[k]:\n","      example_tuples_max_sampled.append(ex)\n","  return example_tuples_max_sampled"]},{"cell_type":"markdown","metadata":{"id":"7EFQMMop0fyz"},"source":["## Create DataLoaders\n","\n","TODO - Test."]},{"cell_type":"code","execution_count":50,"metadata":{"id":"at-9T_v0h60u","executionInfo":{"status":"ok","timestamp":1676416076189,"user_tz":300,"elapsed":22,"user":{"displayName":"Bill Power","userId":"17299628813846429758"}}},"outputs":[],"source":["def preprocess_sentences(df_content, balance=True):\n","  content_example_tuples = []\n","  \n","  # Uses the maps created before to obtain token_seqs and attn_masks \n","  # for the questions and contexts. \n","  def make_make_tuple(out_list):\n","    def make_tuple(row):\n","      out_list.append([\n","          map_q_2_ts_am[row['question_id']],\n","          map_ctx_2_ts_am[row['context_id']],\n","          row['content_text'],\n","          row['answer'],\n","          row['context_id'],\n","          row['question_id']\n","      ])\n","    return make_tuple\n","  \n","  df_content.apply(make_make_tuple(content_example_tuples), axis=1)\n","\n","  if balance:\n","    tuples = max_size_oversampling_wr(content_example_tuples)\n","  else:\n","    tuples = content_example_tuples\n","\n","  labels = [i[3] for i in tuples]\n","  iids_questions = []\n","  iids_contexts  = []\n","  iids_contents  = []\n","  ams_questions = []\n","  ams_contexts  = []\n","  ams_contents  = []\n","\n","  for [ts_q, am_q], [ts_ctx, am_ctx], sent, _, _, _ in tuples:\n","    iids_questions.append(ts_q)\n","    iids_contexts.append(ts_ctx)\n","    ams_questions.append(am_q)\n","    ams_contexts.append(am_ctx)\n","\n","    enc_dict = tokenizer.encode_plus(\n","        sent,\n","        add_special_tokens = False,\n","        max_length = MAX_SEQ_LEN, \n","        pad_to_max_length = True,\n","        return_attention_mask = True,\n","        return_tensors = 'pt'\n","    )\n","    iids_contents.append(enc_dict['input_ids'])\n","    ams_contents.append(enc_dict['attention_mask'])\n","  \n","  iids_questions = torch.cat(iids_questions, dim=0)\n","  iids_contexts  = torch.cat(iids_contexts,  dim=0)\n","  iids_contents  = torch.cat(iids_contents,  dim=0)\n","  ams_questions =  torch.cat(ams_questions, dim=0)\n","  ams_contexts  =  torch.cat(ams_contexts,  dim=0)\n","  ams_contents  =  torch.cat(ams_contents,  dim=0)\n","  labels = torch.tensor(labels)\n","  labels = torch.reshape(labels, (-1,1))\n","  labels = labels.to(torch.float64)\n","  ret_obj = [\n","      iids_questions, \n","      ams_questions, \n","      iids_contexts, \n","      ams_contexts, \n","      iids_contents, \n","      ams_contents,\n","      labels\n","  ]\n","  return ret_obj"]},{"cell_type":"code","execution_count":51,"metadata":{"id":"2nnRjN4KIM-z","executionInfo":{"status":"ok","timestamp":1676416076190,"user_tz":300,"elapsed":20,"user":{"displayName":"Bill Power","userId":"17299628813846429758"}}},"outputs":[],"source":["# From: https://discuss.pytorch.org/t/how-to-enable-the-dataloader-to-sample-from-each-class-with-equal-probability/911/7\n","from sklearn.model_selection import StratifiedKFold\n","\n","class StratifiedBatchSampler:\n","    \"\"\"Stratified batch sampling\n","    Provides equal representation of target classes in each batch\n","    \"\"\"\n","    def __init__(self, y, batch_size, shuffle=True):\n","        # batch_size = batch_size-1 # FUTURE BILL - YOU DID THIS HACK\n","        y = torch.squeeze(y)\n","        if torch.is_tensor(y):\n","            y = y.numpy()\n","        assert len(y.shape) == 1, 'label array must be 1D'\n","        \n","        n_batches = int(len(y) / batch_size)\n","        self.skf = StratifiedKFold(n_splits=n_batches, shuffle=shuffle)\n","        self.X = torch.randn(len(y),1).numpy()\n","        self.y = y\n","        self.shuffle = shuffle\n","\n","    def __iter__(self):\n","        if self.shuffle:\n","            self.skf.random_state = torch.randint(0,int(1e8),size=()).item()\n","        for train_idx, test_idx in self.skf.split(self.X, self.y):\n","            yield test_idx\n","\n","    def __len__(self):\n","        return len(self.y)"]},{"cell_type":"code","execution_count":52,"metadata":{"id":"wY3j6nyR0py9","executionInfo":{"status":"ok","timestamp":1676416076191,"user_tz":300,"elapsed":18,"user":{"displayName":"Bill Power","userId":"17299628813846429758"}}},"outputs":[],"source":["from torch.utils.data import TensorDataset, DataLoader, RandomSampler, SequentialSampler\n","from sklearn.model_selection import train_test_split\n","\n","# Note - I think that does it? Gross looking, but straightforward?\n","def create_dataloaders(df_content, test_ratio, balance=True):\n","  bigbagohtensors = preprocess_sentences(df_content, balance=balance)\n","  \n","  iids_q   = bigbagohtensors[0]\n","  ams_q    = bigbagohtensors[1] \n","  iids_ctx = bigbagohtensors[2]\n","  ams_ctx  = bigbagohtensors[3]\n","  iids_cnt = bigbagohtensors[4] \n","  ams_cnt  = bigbagohtensors[5] \n","  labels   = bigbagohtensors[6]  \n","\n","  train_idx, test_idx = train_test_split(\n","      np.arange(len(labels)),\n","      test_size = test_ratio,\n","      shuffle = True,\n","      stratify = labels)\n","  \n","  # \"Hey bill, should you google about the splat operator? Maybe.\"\n","  train_set = TensorDataset(iids_q[train_idx],\n","                            ams_q[train_idx],\n","                            iids_ctx[train_idx],\n","                            ams_ctx[train_idx],\n","                            iids_cnt[train_idx],\n","                            ams_cnt[train_idx],\n","                            labels[train_idx])\n","\n","  test_set = TensorDataset(iids_q[test_idx],\n","                           ams_q[test_idx],\n","                           iids_ctx[test_idx],\n","                           ams_ctx[test_idx],\n","                           iids_cnt[test_idx],\n","                           ams_cnt[test_idx],\n","                           labels[test_idx])\n","\n","  train_dataloader = DataLoader(train_set,\n","                                batch_sampler=StratifiedBatchSampler(labels[train_idx],\n","                                                                 BATCH_SIZE))\n","\n","  test_dataloader = DataLoader(test_set,\n","                               batch_sampler=StratifiedBatchSampler(labels[test_idx],\n","                                                                BATCH_SIZE))\n","\n","  return train_dataloader, test_dataloader"]},{"cell_type":"markdown","metadata":{"id":"8FoP5ForAtkE"},"source":["# Training/Evaluation Setup"]},{"cell_type":"markdown","metadata":{"id":"rPCF7MZNzOAT"},"source":["## Model Implementation"]},{"cell_type":"code","execution_count":53,"metadata":{"id":"UYqqeGe8zVd8","executionInfo":{"status":"ok","timestamp":1676416076192,"user_tz":300,"elapsed":17,"user":{"displayName":"Bill Power","userId":"17299628813846429758"}}},"outputs":[],"source":["import torch.nn.functional as F\n","from torch.nn import Module, RNN, Linear, BCELoss, LogSoftmax, BatchNorm1d\n","\n","NUM_BERT_FEATURES = 768\n","\n","# consider upping this - should  have no less than 100 dim inbetween the\n","# BERT layers and the prediction layers. It's usually 100-300\n","HL_QUESTION = 128\n","HL_CONTEXTS = 128\n","HL_CONTENT  = 128\n","HL_PRED = 8\n","\n","class AQAM(torch.nn.Module):\n","    def __init__(self):\n","        super().__init__()\n","\n","        # Transformer Embedding Layer\n","        self.bert_layer = model_class.from_pretrained(pretrained_weights,    \n","                                                      num_labels = 2,\n","                                                      output_attentions = False,\n","                                                      output_hidden_states = False,\n","                                                      return_dict=False)\n","\n","        # 3 MLP Stacks\n","        self.q_linear1   = Linear(NUM_BERT_FEATURES, HL_QUESTION)\n","        self.ctx_linear1 = Linear(NUM_BERT_FEATURES, HL_CONTEXTS)\n","        self.content_linear1 = Linear(NUM_BERT_FEATURES, HL_CONTENT)\n","        \n","        # Prediction Layers\n","        self.pred_linear1 = Linear(HL_QUESTION+HL_CONTEXTS+HL_CONTENT, HL_PRED)\n","        self.pred_linear2 = Linear(HL_PRED, 1)\n","\n","        # Batch Norms\n","        self.bn_q    = BatchNorm1d(HL_QUESTION)\n","        self.bn_ctx  = BatchNorm1d(HL_CONTEXTS)\n","        self.bn_cnt  = BatchNorm1d(HL_CONTENT) \n","\n","        # self.bn_triple = BatchNorm1d(HL_QUESTION+HL_CONTEXTS+HL_CONTENT)\n","        self.bn_cat  = BatchNorm1d(HL_PRED) \n","\n","    def forward(self, data):\n","        tok_seq_q,   attn_mask_q   = data[0], data[1]\n","        tok_seq_ctx, attn_mask_ctx = data[2], data[3]\n","        tok_seq_cnt, attn_mask_cnt = data[4], data[5]\n","        \n","        emb_q   = self.bert_layer(tok_seq_q,   \n","                                  attention_mask=attn_mask_q)[0][:, 0, :]\n","        emb_ctx = self.bert_layer(tok_seq_ctx, \n","                                  attention_mask=attn_mask_ctx)[0][:, 0, :]\n","        emb_cnt = self.bert_layer(tok_seq_cnt, \n","                                  attention_mask=attn_mask_cnt)[0][:, 0, :]\n","\n","        # The 3 Heads - Question, Context, Content spaces.\n","        ls_q   = self.q_linear1(emb_q)\n","        ls_q   = self.bn_q(ls_q)\n","        ls_q   = F.relu(ls_q)\n","\n","        ls_ctx = self.ctx_linear1(emb_ctx)\n","        ls_ctx = self.bn_ctx(ls_ctx)\n","        ls_ctx = F.relu(ls_ctx)\n","        \n","        ls_cnt = self.content_linear1(emb_cnt)\n","        ls_cnt = self.bn_cnt(ls_cnt)\n","        ls_cnt = F.relu(ls_cnt)\n","\n","        ls_cat = torch.cat((ls_q, ls_ctx, ls_cnt), dim=1)\n","        \n","        # Prediction Layers\n","        ls_cat = self.pred_linear1(ls_cat)\n","        ls_cat = self.bn_cat(ls_cat)\n","        ls_cat = F.relu(ls_cat)\n","        return self.pred_linear2(ls_cat)"]},{"cell_type":"markdown","metadata":{"id":"h6ilu9ax8bze"},"source":["## Training and Evaluation Method"]},{"cell_type":"code","execution_count":54,"metadata":{"id":"f2D3fYj89Bpz","executionInfo":{"status":"ok","timestamp":1676416076192,"user_tz":300,"elapsed":15,"user":{"displayName":"Bill Power","userId":"17299628813846429758"}}},"outputs":[],"source":["from torch.optim import SGD"]},{"cell_type":"code","execution_count":55,"metadata":{"id":"MaoTTbX0BfNN","executionInfo":{"status":"ok","timestamp":1676416076193,"user_tz":300,"elapsed":15,"user":{"displayName":"Bill Power","userId":"17299628813846429758"}}},"outputs":[],"source":["def binary_acc(y_pred, y_test):\n","  # Where we handle the sigmoid for the BC\n","  y_pred_tag = torch.round(torch.sigmoid(y_pred))\n","  correct_results_sum = (y_pred_tag == y_test).sum().float()\n","  acc = correct_results_sum/float(y_test.shape[0])\n","  return acc"]},{"cell_type":"code","execution_count":56,"metadata":{"id":"ynT43r7n9s2P","executionInfo":{"status":"ok","timestamp":1676416076306,"user_tz":300,"elapsed":126,"user":{"displayName":"Bill Power","userId":"17299628813846429758"}}},"outputs":[],"source":["def train_and_evaluate(training_batches, test_set_batches, epochs, cuda_dev, model=None):\n","  if model is None:\n","    model = AQAM().to(cuda_dev)\n","  \n","  optimizer = SGD(model.parameters(), lr=0.001, momentum=0.9)\n","  criterion = torch.nn.BCEWithLogitsLoss().to(cuda_dev)\n","\n","  train_accs = []\n","  test_accs  = [[] for _ in test_set_batches]\n","  for epoch in tqdm(range(epochs), unit=\"epoch\"):\n","    model.train()\n","    \n","    batch_accs = []\n","    for batch in training_batches:\n","      batch = tuple(t.to(cuda_dev) for t in batch)\n","      _, _, _, _, _, _, labels = batch\n","\n","      optimizer.zero_grad()\n","      out = model(batch)\n","      loss = criterion(out, labels)\n","      loss.backward()\n","      optimizer.step()\n","      batch_accs.append(binary_acc(out, labels))\n","\n","    train_accs.append(sum(batch_accs)/float(len(batch_accs)))\n","\n","    model.eval()\n","    for t_idx, test_batches in enumerate(test_set_batches):\n","      test_batch_accs = []\n","      for test_batch in test_batches:\n","        test_batch = tuple(t.to(cuda_dev) for t in test_batch)\n","        _, _, _, _, _, _, test_labels = test_batch\n","\n","        test_out = model(test_batch)\n","        test_batch_accs.append(binary_acc(test_out, test_labels))\n","      \n","      test_accs[t_idx].append(sum(test_batch_accs)/float(len(test_batch_accs)))\n","\n","  return train_accs, test_accs, model"]},{"cell_type":"markdown","metadata":{"id":"0EEfqSGktDTk"},"source":["# Experiments\n"]},{"cell_type":"markdown","metadata":{"id":"uaTk9IXh9M0J"},"source":["## Baseline"]},{"cell_type":"markdown","metadata":{"id":"awiZgm9atGTa"},"source":["Here we want to see the impact on the baseline model. The following code is taken from the AQA 05 script. \n","\n","We know this ran using the data shape and model, so any errors should just be due to our changes to support fine-tuning. "]},{"cell_type":"code","execution_count":57,"metadata":{"id":"amd9rLV6tLhg","executionInfo":{"status":"ok","timestamp":1676416081156,"user_tz":300,"elapsed":4865,"user":{"displayName":"Bill Power","userId":"17299628813846429758"}}},"outputs":[],"source":["A3_fa_train, A3_fa_test = create_dataloaders(content_a3_fa, \n","                                                        0.2,\n","                                                        balance=True)\n","\n","# Treat A2-FA data as the A2 test data. Already have this. \n","# We want to create a validation set, so lets divide the A2-FA data\n","# into two sets of data. We'll use one to train, and one to validate\n","# across all the experiments. 50/50 seems good?\n","A2_fa_train, A2_fa_test = create_dataloaders(content_a2_fa, 0.2, balance=False)\n","\n","# train/eval A3-model on A3 Maj+ training data\n","#   - Pass in A3 test data\n","#   - Pass in A2-FA test data - Does it agree with the FA?\n","test_batches = [\n","  A3_fa_test,\n","  A2_fa_test\n","]"]},{"cell_type":"code","execution_count":58,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":23,"status":"ok","timestamp":1676416081159,"user":{"displayName":"Bill Power","userId":"17299628813846429758"},"user_tz":300},"id":"7NbZSkMC9NR1","outputId":"b9ed3d5c-9e9b-4735-f30c-77ebdee713c6"},"outputs":[{"output_type":"stream","name":"stdout","text":["NVIDIA A100-SXM4-40GB\n"]}],"source":["print(torch.cuda.get_device_name(0))\n","cuda_name = torch.cuda.get_device_name(0)\n","cuda_dev  = torch.device(\"cuda:0\")"]},{"cell_type":"code","execution_count":59,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":121,"referenced_widgets":["f9add0acdbeb45ccb3511699aa35644d","f0dcb50a71b74e5480568fe9033cd188","86e1ed2909544fd2895c720078fb7934","c710e5df6b2d4a27929abdaf8aa09b13","0a1a3d6560824cdab88c2c87332e31b0","e9b752e3e6634495916c5b9bdab6ba6c","b70760dee962447ca2b9ebfbac55edba","f864dc2388f74730a394c7706019a43c","b4f9d087257c4cb094a51abb5921e3ed","392527eba7bc40d1ab2c974f8dcc7f30","ef71ffc5120c4e669dcdc178ee35dab7"]},"executionInfo":{"elapsed":1188730,"status":"ok","timestamp":1676417269872,"user":{"displayName":"Bill Power","userId":"17299628813846429758"},"user_tz":300},"id":"B8MVOM5m3SZE","outputId":"a6585f3d-d4d2-427e-d787-ec64c387b46b"},"outputs":[{"output_type":"stream","name":"stderr","text":["Some weights of the model checkpoint at distilbert-base-uncased were not used when initializing DistilBertModel: ['vocab_transform.weight', 'vocab_projector.weight', 'vocab_transform.bias', 'vocab_projector.bias', 'vocab_layer_norm.weight', 'vocab_layer_norm.bias']\n","- This IS expected if you are initializing DistilBertModel from the checkpoint of a model trained on another task or with another architecture (e.g. initializing a BertForSequenceClassification model from a BertForPreTraining model).\n","- This IS NOT expected if you are initializing DistilBertModel from the checkpoint of a model that you expect to be exactly identical (initializing a BertForSequenceClassification model from a BertForSequenceClassification model).\n"]},{"output_type":"display_data","data":{"text/plain":["  0%|          | 0/100 [00:00<?, ?epoch/s]"],"application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"f9add0acdbeb45ccb3511699aa35644d"}},"metadata":{}}],"source":["train_acc_pre, test_accs_pre, a3_model = train_and_evaluate(A3_fa_train, \n","                                                            test_batches,\n","                                                            EPOCHS,\n","                                                            cuda_dev)"]},{"cell_type":"code","execution_count":60,"metadata":{"id":"Do3zAN43816w","executionInfo":{"status":"ok","timestamp":1676417271882,"user_tz":300,"elapsed":2028,"user":{"displayName":"Bill Power","userId":"17299628813846429758"}}},"outputs":[],"source":["RESULTS_NOTE = \"v2Balanced_10\"\n","\n","results = [train_acc_pre, test_accs_pre]\n","with open(f\"{RESULTS_FN_SLUG}_{RESULTS_NOTE}.p\", 'wb') as f:\n","  pickle.dump(results, f)\n","\n","upload_file_to_gcs(f\"{RESULTS_FN_SLUG}_{RESULTS_NOTE}.p\", f\"{RESULTS_FN_SLUG}_{RESULTS_NOTE}.p\")"]},{"cell_type":"markdown","metadata":{"id":"xmQldHMTWfl-"},"source":["#### Results - Baseline Epoch Losses"]},{"cell_type":"markdown","metadata":{"id":"LD0tWMduZFiK"},"source":["Here we just want to see the per-epoch training and test losses. We have multiple sets of test data to consider (2 for now). Need a graph that shows all 3 lines. \n","\n","This will give a baseline to compare against when we look at the effect of online training the model later (EXP1)."]},{"cell_type":"code","execution_count":61,"metadata":{"id":"Uo-1hODT9H9A","executionInfo":{"status":"ok","timestamp":1676417271884,"user_tz":300,"elapsed":34,"user":{"displayName":"Bill Power","userId":"17299628813846429758"}}},"outputs":[],"source":["import matplotlib.pyplot as plt\n","%matplotlib notebook\n","%matplotlib inline"]},{"cell_type":"code","execution_count":62,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":298},"executionInfo":{"elapsed":1894,"status":"ok","timestamp":1676417273752,"user":{"displayName":"Bill Power","userId":"17299628813846429758"},"user_tz":300},"id":"t0j0oMmkGraq","outputId":"35b53b3b-702e-47d8-a5ce-0de56b40161f"},"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 1 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"light"}},{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 0 Axes>"]},"metadata":{}}],"source":["cutoff = 30\n","\n","data_set = [train_acc_pre]\n","data_set.extend(test_accs_pre)\n","\n","labels = [\"A3M+ Train\", \"A3M+ Test\", \"A2 FA Test\"]\n","colors = [\"tab:red\", \"tab:green\", \"tab:blue\"]\n","\n","for l, test, color in zip(labels, data_set, colors):\n","\n","  test = [i.cpu() for i in test]\n","  plt.plot(test[:cutoff], label=f\"{l}\", color=color)\n","\n","plt.title(\"Baseline Model Test Acc's\")\n","plt.legend(loc='lower left')\n","plt.show()\n","\n","plt_fn = f\"{RESULTS_FN_SLUG}_{RESULTS_NOTE}_baseline.png\"\n","plt.savefig(plt_fn)\n","upload_file_to_gcs(plt_fn, plt_fn)"]},{"cell_type":"markdown","metadata":{"id":"DuU3J_CVaV5w"},"source":["The blue line basically gives us our models agreement with the A2 annotators.\n","\n","Next step will be to update the model with the A2 values it agrees with and see the impact on the A3 and A2 test sets. \n","\n","So we'll need to figure out the 'augmentation' stuff again. "]},{"cell_type":"markdown","metadata":{"id":"u4o7qAd19U9J"},"source":["## Labeling A2 with Trained Model\n","Now we will use the A2 labels that agree with the model to update the model. We then evaluate on the two test sets. \n","\n","Need to isolate the 'agreement' values. "]},{"cell_type":"code","execution_count":63,"metadata":{"id":"oEhzGjml9kpt","executionInfo":{"status":"ok","timestamp":1676417273753,"user_tz":300,"elapsed":6,"user":{"displayName":"Bill Power","userId":"17299628813846429758"}}},"outputs":[],"source":["def create_A2aug_dataloader(batches, model):\n","  agree_q_ts   = []\n","  agree_q_am   = []\n","  agree_ctx_ts = []\n","  agree_cts_am = []\n","  agree_cnt_ts = []\n","  agree_cnt_am = []\n","  agree_labels = []\n","\n","  model.eval()\n","  for batch in batches:\n","    batch = tuple(t.to(cuda_dev) for t in batch)\n","    _, _, _, _, _, _, labels = batch\n","\n","    out = model(batch)\n","    y_pred = torch.round(torch.sigmoid(out))\n","\n","    agree_idxs = (y_pred == labels).nonzero()\n","\n","    for id in agree_idxs:\n","      # print(id)\n","      agree_q_ts.append(batch[0][id, :])\n","      agree_q_am.append(batch[1][id, :])   \n","      agree_ctx_ts.append(batch[2][id, :])\n","      agree_cts_am.append(batch[3][id, :]) \n","      agree_cnt_ts.append(batch[4][id, :]) \n","      agree_cnt_am.append(batch[5][id, :]) \n","      agree_labels.append(batch[6][id]) \n","  \n","  agree_labels = torch.reshape(torch.cat(agree_labels, dim=0), (-1,1)).to(torch.float64).cpu()\n","  dataset = TensorDataset(\n","        torch.cat(agree_q_ts, dim=0).cpu(),\n","        torch.cat(agree_q_am, dim=0).cpu(), \n","        torch.cat(agree_ctx_ts, dim=0).cpu(),\n","        torch.cat(agree_cts_am, dim=0).cpu(),\n","        torch.cat(agree_cnt_ts, dim=0).cpu(),\n","        torch.cat(agree_cnt_am, dim=0).cpu(),\n","        agree_labels\n","  )\n","  dataloader = DataLoader(dataset,\n","                          batch_sampler=StratifiedBatchSampler(agree_labels,\n","                                                               BATCH_SIZE))\n","  return dataloader"]},{"cell_type":"code","execution_count":64,"metadata":{"id":"Cwn9QKLJA7MX","executionInfo":{"status":"ok","timestamp":1676417279139,"user_tz":300,"elapsed":5392,"user":{"displayName":"Bill Power","userId":"17299628813846429758"}}},"outputs":[],"source":["A2_aug = create_A2aug_dataloader(A2_fa_train, a3_model)"]},{"cell_type":"code","execution_count":65,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":49,"referenced_widgets":["d05e39eca7e84753a686b8b2eecfc94e","06d0c13e2f554ee38e20d3b968b7e536","386dd09b2d364afdb556f78747944229","67766b2b48884368aa38c6011e718e6f","173769a5cbff4761906d33d40c9ff737","adbcd0884ae744a8a2f883510b1af648","1ea03e9be8c5435393da30c1aae59639","bf05e0b1a28d413f874280f83c9af305","0d8ce93b718e470a9790b4255f6e80c6","5d45444de42d4217889427263f738b19","1839db0b3ec84a8b96554c4e178f156b"]},"id":"JKaLScaDBMKt","outputId":"ede4b9d8-8944-4a2c-a69e-b48a2025b98a","executionInfo":{"status":"ok","timestamp":1676419845164,"user_tz":300,"elapsed":2566067,"user":{"displayName":"Bill Power","userId":"17299628813846429758"}}},"outputs":[{"output_type":"display_data","data":{"text/plain":["  0%|          | 0/100 [00:00<?, ?epoch/s]"],"application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"d05e39eca7e84753a686b8b2eecfc94e"}},"metadata":{}}],"source":["train_acc_aug, test_accs_aug, a3_model = train_and_evaluate(A2_aug, \n","                                                            test_batches,\n","                                                            EPOCHS,\n","                                                            cuda_dev,\n","                                                            model=a3_model)"]},{"cell_type":"markdown","metadata":{"id":"tSA0U-m_BX4d"},"source":["### Results - Model Augment A2 Labels\n"]},{"cell_type":"markdown","metadata":{"id":"b6TeVyjrCXbV"},"source":[]},{"cell_type":"code","execution_count":66,"metadata":{"id":"qnkBMqyuBpc5","executionInfo":{"status":"ok","timestamp":1676419847118,"user_tz":300,"elapsed":1963,"user":{"displayName":"Bill Power","userId":"17299628813846429758"}}},"outputs":[],"source":["RESULTS_NOTE_2 = f\"{RESULTS_NOTE}_A2_augA3_model\"\n","\n","results = [train_acc_aug, test_accs_aug]\n","with open(f\"{RESULTS_FN_SLUG}_{RESULTS_NOTE_2}.p\", 'wb') as f:\n","  pickle.dump(results, f)\n","\n","upload_file_to_gcs(f\"{RESULTS_FN_SLUG}_{RESULTS_NOTE_2}.p\", f\"{RESULTS_FN_SLUG}_{RESULTS_NOTE_2}.p\")"]},{"cell_type":"code","execution_count":67,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":298},"id":"6VecbDrCBdwQ","outputId":"1edb7bf1-347b-4a4d-8810-b09018e96675","executionInfo":{"status":"ok","timestamp":1676419849189,"user_tz":300,"elapsed":2077,"user":{"displayName":"Bill Power","userId":"17299628813846429758"}}},"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 1 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"light"}},{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 0 Axes>"]},"metadata":{}}],"source":["cutoff = 30\n","\n","data_set = [train_acc_aug]\n","data_set.extend(test_accs_aug)\n","\n","labels = [\"A3M+ Train\", \"A3M+ Test\", \"A2 FA Test\"]\n","colors = [\"tab:red\", \"tab:green\", \"tab:blue\"]\n","\n","for l, test, color in zip(labels, data_set, colors):\n","\n","  test = [i.cpu() for i in test]\n","  plt.plot(test[:cutoff], label=f\"{l}\", color=color)\n","\n","plt.title(\"Model Aug A2 Updated Test Acc's\")\n","plt.legend(loc='lower left')\n","plt.show()\n","\n","plt_fn = f\"{RESULTS_FN_SLUG}_{RESULTS_NOTE}_auged_a3_model.png\"\n","plt.savefig(plt_fn)\n","upload_file_to_gcs(plt_fn, plt_fn)"]}],"metadata":{"accelerator":"GPU","colab":{"collapsed_sections":["H-WxazjxN4H_","ybu8iEZskb-3","Df9iIZyhkb--","tzRLOi-Jkb-_","TBwBOc1LJWSS","YEniTxLUPL-K","zUUz0lb2yLAg","8FoP5ForAtkE","h6ilu9ax8bze"],"machine_shape":"hm","toc_visible":true,"provenance":[],"authorship_tag":"ABX9TyNw8cGFTSdp1OMNlomd8EVB"},"gpuClass":"premium","kernelspec":{"display_name":"Python 3","name":"python3"},"language_info":{"name":"python"},"widgets":{"application/vnd.jupyter.widget-state+json":{"f9add0acdbeb45ccb3511699aa35644d":{"model_module":"@jupyter-widgets/controls","model_name":"HBoxModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HBoxModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HBoxView","box_style":"","children":["IPY_MODEL_f0dcb50a71b74e5480568fe9033cd188","IPY_MODEL_86e1ed2909544fd2895c720078fb7934","IPY_MODEL_c710e5df6b2d4a27929abdaf8aa09b13"],"layout":"IPY_MODEL_0a1a3d6560824cdab88c2c87332e31b0"}},"f0dcb50a71b74e5480568fe9033cd188":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_e9b752e3e6634495916c5b9bdab6ba6c","placeholder":"​","style":"IPY_MODEL_b70760dee962447ca2b9ebfbac55edba","value":"100%"}},"86e1ed2909544fd2895c720078fb7934":{"model_module":"@jupyter-widgets/controls","model_name":"FloatProgressModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"FloatProgressModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"ProgressView","bar_style":"success","description":"","description_tooltip":null,"layout":"IPY_MODEL_f864dc2388f74730a394c7706019a43c","max":100,"min":0,"orientation":"horizontal","style":"IPY_MODEL_b4f9d087257c4cb094a51abb5921e3ed","value":100}},"c710e5df6b2d4a27929abdaf8aa09b13":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_392527eba7bc40d1ab2c974f8dcc7f30","placeholder":"​","style":"IPY_MODEL_ef71ffc5120c4e669dcdc178ee35dab7","value":" 100/100 [19:47&lt;00:00, 11.88s/epoch]"}},"0a1a3d6560824cdab88c2c87332e31b0":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"e9b752e3e6634495916c5b9bdab6ba6c":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"b70760dee962447ca2b9ebfbac55edba":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}},"f864dc2388f74730a394c7706019a43c":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"b4f9d087257c4cb094a51abb5921e3ed":{"model_module":"@jupyter-widgets/controls","model_name":"ProgressStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"ProgressStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","bar_color":null,"description_width":""}},"392527eba7bc40d1ab2c974f8dcc7f30":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"ef71ffc5120c4e669dcdc178ee35dab7":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}},"d05e39eca7e84753a686b8b2eecfc94e":{"model_module":"@jupyter-widgets/controls","model_name":"HBoxModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HBoxModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HBoxView","box_style":"","children":["IPY_MODEL_06d0c13e2f554ee38e20d3b968b7e536","IPY_MODEL_386dd09b2d364afdb556f78747944229","IPY_MODEL_67766b2b48884368aa38c6011e718e6f"],"layout":"IPY_MODEL_173769a5cbff4761906d33d40c9ff737"}},"06d0c13e2f554ee38e20d3b968b7e536":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_adbcd0884ae744a8a2f883510b1af648","placeholder":"​","style":"IPY_MODEL_1ea03e9be8c5435393da30c1aae59639","value":"100%"}},"386dd09b2d364afdb556f78747944229":{"model_module":"@jupyter-widgets/controls","model_name":"FloatProgressModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"FloatProgressModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"ProgressView","bar_style":"success","description":"","description_tooltip":null,"layout":"IPY_MODEL_bf05e0b1a28d413f874280f83c9af305","max":100,"min":0,"orientation":"horizontal","style":"IPY_MODEL_0d8ce93b718e470a9790b4255f6e80c6","value":100}},"67766b2b48884368aa38c6011e718e6f":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_5d45444de42d4217889427263f738b19","placeholder":"​","style":"IPY_MODEL_1839db0b3ec84a8b96554c4e178f156b","value":" 100/100 [42:46&lt;00:00, 25.66s/epoch]"}},"173769a5cbff4761906d33d40c9ff737":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"adbcd0884ae744a8a2f883510b1af648":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"1ea03e9be8c5435393da30c1aae59639":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}},"bf05e0b1a28d413f874280f83c9af305":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"0d8ce93b718e470a9790b4255f6e80c6":{"model_module":"@jupyter-widgets/controls","model_name":"ProgressStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"ProgressStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","bar_color":null,"description_width":""}},"5d45444de42d4217889427263f738b19":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"1839db0b3ec84a8b96554c4e178f156b":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}}}}},"nbformat":4,"nbformat_minor":0}