{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"collapsed_sections":["vbQmzniZq_eV","TBwBOc1LJWSS","YEniTxLUPL-K","zUUz0lb2yLAg","LOr21JIPpm8I","rPCF7MZNzOAT","8cTZOWro-7PN","51Y1tIwwJyiu","qEbmfpMAJ3vZ","sPi9fpKzJ4CF"],"toc_visible":true,"machine_shape":"hm","authorship_tag":"ABX9TyOgIW5dlx54LjTXgmo0y9F+"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"},"widgets":{"application/vnd.jupyter.widget-state+json":{"7bc75c3e07e5474db071e079c9a891a8":{"model_module":"@jupyter-widgets/controls","model_name":"HBoxModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HBoxModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HBoxView","box_style":"","children":["IPY_MODEL_376ab3800e384e3597a786b63b51ec67","IPY_MODEL_deaeae784baa4bc88fdebe8d877a2042","IPY_MODEL_0236da4f2b2d447baaa8a2b742bf69e1"],"layout":"IPY_MODEL_0f174268da6045d49b673f958aa35481"}},"376ab3800e384e3597a786b63b51ec67":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_0be898fd3f46455b976341c8c1a6ef15","placeholder":"​","style":"IPY_MODEL_f14bd20c126145c5985591934533f13c","value":"Downloading: 100%"}},"deaeae784baa4bc88fdebe8d877a2042":{"model_module":"@jupyter-widgets/controls","model_name":"FloatProgressModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"FloatProgressModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"ProgressView","bar_style":"success","description":"","description_tooltip":null,"layout":"IPY_MODEL_d686dbeed1134333b63b6b03fbc46a98","max":231508,"min":0,"orientation":"horizontal","style":"IPY_MODEL_8b27378b902a41fe8b883b1958f7fe1f","value":231508}},"0236da4f2b2d447baaa8a2b742bf69e1":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_bed4b281eda44316a524b358ad9b86ae","placeholder":"​","style":"IPY_MODEL_50f5eef9a6784c34b8cdee4c1542b3dc","value":" 232k/232k [00:00&lt;00:00, 262kB/s]"}},"0f174268da6045d49b673f958aa35481":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"0be898fd3f46455b976341c8c1a6ef15":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"f14bd20c126145c5985591934533f13c":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}},"d686dbeed1134333b63b6b03fbc46a98":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"8b27378b902a41fe8b883b1958f7fe1f":{"model_module":"@jupyter-widgets/controls","model_name":"ProgressStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"ProgressStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","bar_color":null,"description_width":""}},"bed4b281eda44316a524b358ad9b86ae":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"50f5eef9a6784c34b8cdee4c1542b3dc":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}},"0544f156aa8a4c0fb899e1016730f3bd":{"model_module":"@jupyter-widgets/controls","model_name":"HBoxModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HBoxModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HBoxView","box_style":"","children":["IPY_MODEL_a3e806f2fb9e4fd6b46b0defc73e11e1","IPY_MODEL_7ea11b096d014795b142b14467ac484f","IPY_MODEL_b18fdfcb73eb42be971af237c728f709"],"layout":"IPY_MODEL_2767901166114dfd89463fe6215ef8da"}},"a3e806f2fb9e4fd6b46b0defc73e11e1":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_abf1663c51c540bd93274c42a4cab403","placeholder":"​","style":"IPY_MODEL_27588a9fea8c4eebab7d3f40a797090c","value":"Downloading: 100%"}},"7ea11b096d014795b142b14467ac484f":{"model_module":"@jupyter-widgets/controls","model_name":"FloatProgressModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"FloatProgressModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"ProgressView","bar_style":"success","description":"","description_tooltip":null,"layout":"IPY_MODEL_87a57a83ee854a1ea2e6c0b95ee6c0c5","max":28,"min":0,"orientation":"horizontal","style":"IPY_MODEL_b1dcc42e1e9f4b489e7866d5167e9ba3","value":28}},"b18fdfcb73eb42be971af237c728f709":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_a2be74fc8a854810a9471060fcdc5f59","placeholder":"​","style":"IPY_MODEL_bcbe0412d3584c6193ffff3855e6fd19","value":" 28.0/28.0 [00:00&lt;00:00, 2.23kB/s]"}},"2767901166114dfd89463fe6215ef8da":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"abf1663c51c540bd93274c42a4cab403":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"27588a9fea8c4eebab7d3f40a797090c":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}},"87a57a83ee854a1ea2e6c0b95ee6c0c5":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"b1dcc42e1e9f4b489e7866d5167e9ba3":{"model_module":"@jupyter-widgets/controls","model_name":"ProgressStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"ProgressStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","bar_color":null,"description_width":""}},"a2be74fc8a854810a9471060fcdc5f59":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"bcbe0412d3584c6193ffff3855e6fd19":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}},"effda71fa5f94b52b53c928cdaee6277":{"model_module":"@jupyter-widgets/controls","model_name":"HBoxModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HBoxModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HBoxView","box_style":"","children":["IPY_MODEL_3bf5107971d34d3a8a1c12e35ad8c379","IPY_MODEL_59b7958ad15b4f2cb75c1ae16a78563a","IPY_MODEL_b2d61465fe7449ecbd2c0c3c608cfd09"],"layout":"IPY_MODEL_d69d4c59250d4a82a33acdbe26449e52"}},"3bf5107971d34d3a8a1c12e35ad8c379":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_90199d770dae4e8bbb5bb87251de2207","placeholder":"​","style":"IPY_MODEL_8c54b1d6cfcc4e64beb5ac02a4d554ad","value":"Downloading: 100%"}},"59b7958ad15b4f2cb75c1ae16a78563a":{"model_module":"@jupyter-widgets/controls","model_name":"FloatProgressModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"FloatProgressModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"ProgressView","bar_style":"success","description":"","description_tooltip":null,"layout":"IPY_MODEL_e23d7d02b3a5419ea5cb34af08679732","max":483,"min":0,"orientation":"horizontal","style":"IPY_MODEL_9b94b60c910644179da5cfb5f1b21560","value":483}},"b2d61465fe7449ecbd2c0c3c608cfd09":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_976cb031380341128ce25b717d2112fa","placeholder":"​","style":"IPY_MODEL_6d1d04196c1e4a0db5d24e162c9417dc","value":" 483/483 [00:00&lt;00:00, 34.1kB/s]"}},"d69d4c59250d4a82a33acdbe26449e52":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"90199d770dae4e8bbb5bb87251de2207":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"8c54b1d6cfcc4e64beb5ac02a4d554ad":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}},"e23d7d02b3a5419ea5cb34af08679732":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"9b94b60c910644179da5cfb5f1b21560":{"model_module":"@jupyter-widgets/controls","model_name":"ProgressStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"ProgressStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","bar_color":null,"description_width":""}},"976cb031380341128ce25b717d2112fa":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"6d1d04196c1e4a0db5d24e162c9417dc":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}},"df7024b76e7e4b43940c6c207e109149":{"model_module":"@jupyter-widgets/controls","model_name":"HBoxModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HBoxModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HBoxView","box_style":"","children":["IPY_MODEL_b7379d9004a94ff3b08ba3c21ef38cfe","IPY_MODEL_9a3789a71e6d422cbffb8618115c7f79","IPY_MODEL_b27ea5fcacf841f5a5c234be561cbd93"],"layout":"IPY_MODEL_c74441fbc1ba490a9c5323f27ba1b543"}},"b7379d9004a94ff3b08ba3c21ef38cfe":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_582a525a50454b958b42a622213d8ba0","placeholder":"​","style":"IPY_MODEL_aa3a2942c415420dbe8c669a64ab5c4b","value":"Downloading: 100%"}},"9a3789a71e6d422cbffb8618115c7f79":{"model_module":"@jupyter-widgets/controls","model_name":"FloatProgressModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"FloatProgressModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"ProgressView","bar_style":"success","description":"","description_tooltip":null,"layout":"IPY_MODEL_55ee3026e8ca4ef88a90f4e26c1d9700","max":267967963,"min":0,"orientation":"horizontal","style":"IPY_MODEL_cfc89b985e5e446bb397dd2b3f715ef1","value":267967963}},"b27ea5fcacf841f5a5c234be561cbd93":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_65987bf2dc0a49c9beccd00f7311d941","placeholder":"​","style":"IPY_MODEL_c310e1e2ee6d410a8a700b25e8f07f87","value":" 268M/268M [00:03&lt;00:00, 86.3MB/s]"}},"c74441fbc1ba490a9c5323f27ba1b543":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"582a525a50454b958b42a622213d8ba0":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"aa3a2942c415420dbe8c669a64ab5c4b":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}},"55ee3026e8ca4ef88a90f4e26c1d9700":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"cfc89b985e5e446bb397dd2b3f715ef1":{"model_module":"@jupyter-widgets/controls","model_name":"ProgressStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"ProgressStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","bar_color":null,"description_width":""}},"65987bf2dc0a49c9beccd00f7311d941":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"c310e1e2ee6d410a8a700b25e8f07f87":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}},"49b5220b9ba9486ba8bd03a887330ca1":{"model_module":"@jupyter-widgets/controls","model_name":"HBoxModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HBoxModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HBoxView","box_style":"","children":["IPY_MODEL_b9ecf085947d4f50ab141e85bd3908fe","IPY_MODEL_61d9a506d673427baf1729f8bbe10043","IPY_MODEL_397367a8b05243cfb730a4bcbeb5cecd"],"layout":"IPY_MODEL_c1795034b90044ffb014bb3424f9bffb"}},"b9ecf085947d4f50ab141e85bd3908fe":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_752a1e81d79d4339a8f3c357e69b7c27","placeholder":"​","style":"IPY_MODEL_a6251b5320a8450abcd00e4fdc49fafe","value":"100%"}},"61d9a506d673427baf1729f8bbe10043":{"model_module":"@jupyter-widgets/controls","model_name":"FloatProgressModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"FloatProgressModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"ProgressView","bar_style":"success","description":"","description_tooltip":null,"layout":"IPY_MODEL_78c73f5e529e4a37832dca8e22a3b98a","max":40,"min":0,"orientation":"horizontal","style":"IPY_MODEL_90b368a0c2be4828be00b6f983875dcf","value":40}},"397367a8b05243cfb730a4bcbeb5cecd":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_9ef1d362f258408987c6e2e950eb23ac","placeholder":"​","style":"IPY_MODEL_50209b70ba78488db317d57de1e924a7","value":" 40/40 [00:03&lt;00:00,  9.10epoch/s]"}},"c1795034b90044ffb014bb3424f9bffb":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"752a1e81d79d4339a8f3c357e69b7c27":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"a6251b5320a8450abcd00e4fdc49fafe":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}},"78c73f5e529e4a37832dca8e22a3b98a":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"90b368a0c2be4828be00b6f983875dcf":{"model_module":"@jupyter-widgets/controls","model_name":"ProgressStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"ProgressStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","bar_color":null,"description_width":""}},"9ef1d362f258408987c6e2e950eb23ac":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"50209b70ba78488db317d57de1e924a7":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}},"ba431fcc0a0d40ff99254d9d5cb3f704":{"model_module":"@jupyter-widgets/controls","model_name":"HBoxModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HBoxModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HBoxView","box_style":"","children":["IPY_MODEL_5f0142aa2eb1462cadde949063818291","IPY_MODEL_ca7f7f17c9d046fcadc3c1311ee07aed","IPY_MODEL_8aeb12a0006a497198fd3c5da3112104"],"layout":"IPY_MODEL_3822c7d37b854d2cb879c1879ed10664"}},"5f0142aa2eb1462cadde949063818291":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_90681895a3a24ecbab5f148f1717d369","placeholder":"​","style":"IPY_MODEL_bee4a4b6912b4ad1a93397e1d64948ad","value":"100%"}},"ca7f7f17c9d046fcadc3c1311ee07aed":{"model_module":"@jupyter-widgets/controls","model_name":"FloatProgressModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"FloatProgressModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"ProgressView","bar_style":"success","description":"","description_tooltip":null,"layout":"IPY_MODEL_cca9d1c1eca045b6b314ab521e04d13d","max":40,"min":0,"orientation":"horizontal","style":"IPY_MODEL_86d820f1a2bf4ac88196fa997aefdee5","value":40}},"8aeb12a0006a497198fd3c5da3112104":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_c8079b05cc124302864ed09d2b4b41cc","placeholder":"​","style":"IPY_MODEL_6f6781b90caf498e958071f540af89f3","value":" 40/40 [00:00&lt;00:00, 166.53epoch/s]"}},"3822c7d37b854d2cb879c1879ed10664":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"90681895a3a24ecbab5f148f1717d369":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"bee4a4b6912b4ad1a93397e1d64948ad":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}},"cca9d1c1eca045b6b314ab521e04d13d":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"86d820f1a2bf4ac88196fa997aefdee5":{"model_module":"@jupyter-widgets/controls","model_name":"ProgressStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"ProgressStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","bar_color":null,"description_width":""}},"c8079b05cc124302864ed09d2b4b41cc":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"6f6781b90caf498e958071f540af89f3":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}}}},"gpuClass":"standard","accelerator":"GPU"},"cells":[{"cell_type":"markdown","source":["# Overview"],"metadata":{"id":"vbQmzniZq_eV"}},{"cell_type":"markdown","source":["Need a full set of Maj+ 3 Annotator data. \n","\n","Need a full set of the 2 Annotator data.\n","\n","Experiment outline;\n","\n","* Train on Maj+ 3A data \n","* Split 2A data into validate and training sets\n","* Evaluate Original model on validation set\n","* Use model to label 2A 'training' data, add resulting data to full training data\n","* Train a new model on the combined 3+Meta-labeled data\n","  - Evaluate on validation set\n","\n","Might also want to consider the case where we add in the 2A majority data to the original trianing set.\n","\n","But first up we just need to retrieve the raw data, so we can process it. This is all done by the scripts we already have written. Just need to copy and paste. You could have this done tonight if you decide to stay up. Maybe we do that. Time alone programming? Idk. \n","\n"],"metadata":{"id":"f2jOJTJ_gQ_a"}},{"cell_type":"markdown","metadata":{"id":"AbeAB8Hokb-2"},"source":["# Setup"]},{"cell_type":"markdown","metadata":{"id":"ybu8iEZskb-3"},"source":["## Imports"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"JiAEt7P6kb-3"},"outputs":[],"source":["import os\n","import numpy as np\n","import pandas as pd\n","from sklearn.model_selection import train_test_split\n","from sklearn.linear_model import LogisticRegression\n","from sklearn.model_selection import GridSearchCV\n","from sklearn.model_selection import cross_val_score\n","import torch\n","import random\n","import warnings\n","warnings.filterwarnings('ignore')\n","\n","from tqdm.notebook import tqdm\n","import pickle"]},{"cell_type":"markdown","metadata":{"id":"0fSMAjHpkb-4"},"source":["## Constants"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"UNU4HLNZkb-5"},"outputs":[],"source":["GCS_APP_ID = \"aqa-research\"\n","GCS_BUCKET = \"dabi-aqa-data-00\"\n","\n","FN_QUESTIONS = \"questions_01.csv\"\n","FN_CONTEXTS  = \"contexts_01.csv\"\n","\n","FN_A2_RAW = \"a2_raw.csv\"\n","FN_A2_FA  = \"a2_gs.csv\"\n","FN_A3_FA  = \"a3_gs.csv\"\n","FN_A3_MAJ = \"a3_con.csv\"\n","\n","MAX_SEQ_LEN = 128\n","\n","EPOCHS = 100\n","BATCH_SIZE = 64\n","TEST_FRAC = 0.1\n","\n","RAND_SEED = 4242"]},{"cell_type":"markdown","metadata":{"id":"glKP3nrhkb-6"},"source":["## GCS Auth - Input Needed"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":13883,"status":"ok","timestamp":1673911158884,"user":{"displayName":"Bill Power","userId":"17299628813846429758"},"user_tz":300},"id":"xwxl9-b4kb-7","outputId":"ff71210b-9a71-4b12-e798-08e76de265ee"},"outputs":[{"output_type":"stream","name":"stdout","text":["Go to the following link in your browser:\n","\n","    https://accounts.google.com/o/oauth2/auth?response_type=code&client_id=32555940559.apps.googleusercontent.com&redirect_uri=https%3A%2F%2Fsdk.cloud.google.com%2Fauthcode.html&scope=openid+https%3A%2F%2Fwww.googleapis.com%2Fauth%2Fuserinfo.email+https%3A%2F%2Fwww.googleapis.com%2Fauth%2Fcloud-platform+https%3A%2F%2Fwww.googleapis.com%2Fauth%2Fappengine.admin+https%3A%2F%2Fwww.googleapis.com%2Fauth%2Fsqlservice.login+https%3A%2F%2Fwww.googleapis.com%2Fauth%2Fcompute+https%3A%2F%2Fwww.googleapis.com%2Fauth%2Faccounts.reauth&state=AquRAqsmZcwoPjdM660991ChhaYJ4Z&prompt=consent&access_type=offline&code_challenge=SMI0MXnAQnmExBw3nLBFBT8J-HPNfS0fTyt8Iie4adU&code_challenge_method=S256\n","\n","Enter authorization code: 4/0AWgavdeL9BjMkGxJUzWVCMsjLFetVYCtPJY-xOezBYseKZHTGhFvrOYU41QEs_vppQNn-g\n","\n","You are now logged in as [willpowe@gmail.com].\n","Your current project is [None].  You can change this setting by running:\n","  $ gcloud config set project PROJECT_ID\n"]}],"source":["!gcloud auth login --launch-browser"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":1502,"status":"ok","timestamp":1673911160373,"user":{"displayName":"Bill Power","userId":"17299628813846429758"},"user_tz":300},"id":"SEQdfjlikb-7","outputId":"6f4e0212-efd6-458d-89d9-0ed61ca0cf1b"},"outputs":[{"output_type":"stream","name":"stdout","text":["Updated property [core/project].\n"]}],"source":["!gcloud config set project {GCS_APP_ID}"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"1x_hDs2gkb-8"},"outputs":[],"source":["def download_file_from_gcs(src_fn, dest_fn):\n","  dest = f\"/content/{dest_fn}\"\n","  dl_command = f\"gsutil -m cp gs://{GCS_BUCKET}/{src_fn} {dest}\"\n","  os.system(dl_command)\n","\n","def upload_file_to_gcs(src_fn, dest_fn):\n","  dest_url = \"{}/{}\".format(GCS_BUCKET, dest_fn)\n","  ul_command = \"gsutil -m cp {} gs://{}\".format(src_fn, dest_url)\n","  os.system(ul_command)"]},{"cell_type":"markdown","metadata":{"id":"Df9iIZyhkb--"},"source":["## Raw Data"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"YOIG4PnXkb-_"},"outputs":[],"source":["download_file_from_gcs(FN_QUESTIONS, FN_QUESTIONS)\n","download_file_from_gcs(FN_CONTEXTS, FN_CONTEXTS)\n","\n","download_file_from_gcs(FN_A2_RAW, FN_A2_RAW)\n","download_file_from_gcs(FN_A2_FA, FN_A2_FA)\n","download_file_from_gcs(FN_A3_FA, FN_A3_FA)\n","download_file_from_gcs(FN_A3_MAJ, FN_A3_MAJ)"]},{"cell_type":"markdown","metadata":{"id":"tzRLOi-Jkb-_"},"source":["## BERT Setup"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":9639,"status":"ok","timestamp":1673911188523,"user":{"displayName":"Bill Power","userId":"17299628813846429758"},"user_tz":300},"id":"C_lWu_g_kb_A","outputId":"0a8405cb-d82c-4186-8361-ff7f8e23c08f"},"outputs":[{"output_type":"stream","name":"stdout","text":["Looking in indexes: https://pypi.org/simple, https://us-python.pkg.dev/colab-wheels/public/simple/\n","Collecting transformers\n","  Downloading transformers-4.25.1-py3-none-any.whl (5.8 MB)\n","\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m5.8/5.8 MB\u001b[0m \u001b[31m87.6 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hRequirement already satisfied: filelock in /usr/local/lib/python3.8/dist-packages (from transformers) (3.9.0)\n","Requirement already satisfied: pyyaml>=5.1 in /usr/local/lib/python3.8/dist-packages (from transformers) (6.0)\n","Requirement already satisfied: regex!=2019.12.17 in /usr/local/lib/python3.8/dist-packages (from transformers) (2022.6.2)\n","Requirement already satisfied: tqdm>=4.27 in /usr/local/lib/python3.8/dist-packages (from transformers) (4.64.1)\n","Collecting huggingface-hub<1.0,>=0.10.0\n","  Downloading huggingface_hub-0.11.1-py3-none-any.whl (182 kB)\n","\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m182.4/182.4 KB\u001b[0m \u001b[31m23.2 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hRequirement already satisfied: numpy>=1.17 in /usr/local/lib/python3.8/dist-packages (from transformers) (1.21.6)\n","Collecting tokenizers!=0.11.3,<0.14,>=0.11.1\n","  Downloading tokenizers-0.13.2-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (7.6 MB)\n","\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m7.6/7.6 MB\u001b[0m \u001b[31m108.6 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hRequirement already satisfied: packaging>=20.0 in /usr/local/lib/python3.8/dist-packages (from transformers) (21.3)\n","Requirement already satisfied: requests in /usr/local/lib/python3.8/dist-packages (from transformers) (2.25.1)\n","Requirement already satisfied: typing-extensions>=3.7.4.3 in /usr/local/lib/python3.8/dist-packages (from huggingface-hub<1.0,>=0.10.0->transformers) (4.4.0)\n","Requirement already satisfied: pyparsing!=3.0.5,>=2.0.2 in /usr/local/lib/python3.8/dist-packages (from packaging>=20.0->transformers) (3.0.9)\n","Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.8/dist-packages (from requests->transformers) (2022.12.7)\n","Requirement already satisfied: urllib3<1.27,>=1.21.1 in /usr/local/lib/python3.8/dist-packages (from requests->transformers) (1.24.3)\n","Requirement already satisfied: chardet<5,>=3.0.2 in /usr/local/lib/python3.8/dist-packages (from requests->transformers) (4.0.0)\n","Requirement already satisfied: idna<3,>=2.5 in /usr/local/lib/python3.8/dist-packages (from requests->transformers) (2.10)\n","Installing collected packages: tokenizers, huggingface-hub, transformers\n","Successfully installed huggingface-hub-0.11.1 tokenizers-0.13.2 transformers-4.25.1\n"]}],"source":["!pip install transformers"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"VA_ZnC0dkb_A"},"outputs":[],"source":["import transformers as ppb"]},{"cell_type":"markdown","source":["## Random Seeds"],"metadata":{"id":"TBwBOc1LJWSS"}},{"cell_type":"code","source":["random.seed(RAND_SEED)\n","np.random.seed(RAND_SEED)\n","torch.manual_seed(RAND_SEED)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"HNrkkYVqJV62","executionInfo":{"status":"ok","timestamp":1673911190676,"user_tz":300,"elapsed":14,"user":{"displayName":"Bill Power","userId":"17299628813846429758"}},"outputId":"8be27168-cacc-4332-bf50-67274a082451"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<torch._C.Generator at 0x7f154b288890>"]},"metadata":{},"execution_count":9}]},{"cell_type":"markdown","metadata":{"id":"YEniTxLUPL-K"},"source":["# Data"]},{"cell_type":"markdown","source":["## Content Dataframes"],"metadata":{"id":"zUUz0lb2yLAg"}},{"cell_type":"code","execution_count":null,"metadata":{"id":"WuLRs3tXkb_C"},"outputs":[],"source":["questions = pd.read_csv(FN_QUESTIONS)\n","contexts  = pd.read_csv(FN_CONTEXTS)\n","\n","content_a2_raw = pd.read_csv(FN_A2_RAW)\n","content_a2_fa  = pd.read_csv(FN_A2_FA)\n","content_a3_fa  = pd.read_csv(FN_A3_FA)\n","content_a3_maj = pd.read_csv(FN_A3_MAJ)\n","\n","content_a3_majplus = pd.concat([content_a3_fa, content_a3_maj])"]},{"cell_type":"markdown","metadata":{"id":"kNQBRgQkkb_B"},"source":["## Transformer Init\n","\n"]},{"cell_type":"code","execution_count":null,"metadata":{"executionInfo":{"elapsed":14366,"status":"ok","timestamp":1673911205032,"user":{"displayName":"Bill Power","userId":"17299628813846429758"},"user_tz":300},"id":"wrotnPAHkb_C","colab":{"base_uri":"https://localhost:8080/","height":441,"referenced_widgets":["7bc75c3e07e5474db071e079c9a891a8","376ab3800e384e3597a786b63b51ec67","deaeae784baa4bc88fdebe8d877a2042","0236da4f2b2d447baaa8a2b742bf69e1","0f174268da6045d49b673f958aa35481","0be898fd3f46455b976341c8c1a6ef15","f14bd20c126145c5985591934533f13c","d686dbeed1134333b63b6b03fbc46a98","8b27378b902a41fe8b883b1958f7fe1f","bed4b281eda44316a524b358ad9b86ae","50f5eef9a6784c34b8cdee4c1542b3dc","0544f156aa8a4c0fb899e1016730f3bd","a3e806f2fb9e4fd6b46b0defc73e11e1","7ea11b096d014795b142b14467ac484f","b18fdfcb73eb42be971af237c728f709","2767901166114dfd89463fe6215ef8da","abf1663c51c540bd93274c42a4cab403","27588a9fea8c4eebab7d3f40a797090c","87a57a83ee854a1ea2e6c0b95ee6c0c5","b1dcc42e1e9f4b489e7866d5167e9ba3","a2be74fc8a854810a9471060fcdc5f59","bcbe0412d3584c6193ffff3855e6fd19","effda71fa5f94b52b53c928cdaee6277","3bf5107971d34d3a8a1c12e35ad8c379","59b7958ad15b4f2cb75c1ae16a78563a","b2d61465fe7449ecbd2c0c3c608cfd09","d69d4c59250d4a82a33acdbe26449e52","90199d770dae4e8bbb5bb87251de2207","8c54b1d6cfcc4e64beb5ac02a4d554ad","e23d7d02b3a5419ea5cb34af08679732","9b94b60c910644179da5cfb5f1b21560","976cb031380341128ce25b717d2112fa","6d1d04196c1e4a0db5d24e162c9417dc","df7024b76e7e4b43940c6c207e109149","b7379d9004a94ff3b08ba3c21ef38cfe","9a3789a71e6d422cbffb8618115c7f79","b27ea5fcacf841f5a5c234be561cbd93","c74441fbc1ba490a9c5323f27ba1b543","582a525a50454b958b42a622213d8ba0","aa3a2942c415420dbe8c669a64ab5c4b","55ee3026e8ca4ef88a90f4e26c1d9700","cfc89b985e5e446bb397dd2b3f715ef1","65987bf2dc0a49c9beccd00f7311d941","c310e1e2ee6d410a8a700b25e8f07f87"]},"outputId":"682f7000-71ec-4795-d687-cf68c74ce544"},"outputs":[{"output_type":"display_data","data":{"text/plain":["Downloading:   0%|          | 0.00/232k [00:00<?, ?B/s]"],"application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"7bc75c3e07e5474db071e079c9a891a8"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":["Downloading:   0%|          | 0.00/28.0 [00:00<?, ?B/s]"],"application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"0544f156aa8a4c0fb899e1016730f3bd"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":["Downloading:   0%|          | 0.00/483 [00:00<?, ?B/s]"],"application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"effda71fa5f94b52b53c928cdaee6277"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":["Downloading:   0%|          | 0.00/268M [00:00<?, ?B/s]"],"application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"df7024b76e7e4b43940c6c207e109149"}},"metadata":{}},{"output_type":"stream","name":"stderr","text":["Some weights of the model checkpoint at distilbert-base-uncased were not used when initializing DistilBertModel: ['vocab_layer_norm.weight', 'vocab_transform.weight', 'vocab_projector.weight', 'vocab_projector.bias', 'vocab_layer_norm.bias', 'vocab_transform.bias']\n","- This IS expected if you are initializing DistilBertModel from the checkpoint of a model trained on another task or with another architecture (e.g. initializing a BertForSequenceClassification model from a BertForPreTraining model).\n","- This IS NOT expected if you are initializing DistilBertModel from the checkpoint of a model that you expect to be exactly identical (initializing a BertForSequenceClassification model from a BertForSequenceClassification model).\n"]}],"source":["# For DistilBERT:\n","model_class, tokenizer_class, pretrained_weights = (ppb.DistilBertModel, ppb.DistilBertTokenizer, 'distilbert-base-uncased')\n","\n","## Want BERT instead of distilBERT? Uncomment the following line:\n","#model_class, tokenizer_class, pretrained_weights = (ppb.BertModel, ppb.BertTokenizer, 'bert-base-uncased')\n","\n","# TODO - figure out the above for the Q/A model. Might need a different\n","#        enough implementation/approach that it warrents a dif script. \n","\n","# Load pretrained model/tokenizer\n","tokenizer = tokenizer_class.from_pretrained(pretrained_weights, truncate=True,)\n","bert_model = model_class.from_pretrained(pretrained_weights)"]},{"cell_type":"markdown","metadata":{"id":"LOr21JIPpm8I"},"source":["## Creating Example Tuples"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"C7i_zEHIkb_D"},"outputs":[],"source":["# A side effect of this is all the DF's passed in will have a 'tokens' column \n","# added to them. \n","def prepare_padded_sequences(df_in, text_col):\n","  # Tokenize\n","  df_in['tokens'] = df_in[text_col].apply(lambda x: tokenizer.encode(x,\n","                                                                     max_length=MAX_SEQ_LEN,\n","                                                                     truncation=True,\n","                                                                     add_special_tokens=True))\n","  df_in['num_tokens'] = df_in['tokens'].apply(lambda x: len(x))\n","  max_len = df_in['num_tokens'].max()\n","  return np.array([i + [0]*(max_len-len(i)) for i in df_in['tokens'].values])"]},{"cell_type":"markdown","source":["### Question/Context Embedding Dicts"],"metadata":{"id":"noOpZRP8yXpr"}},{"cell_type":"code","source":["padded_questions = torch.tensor(prepare_padded_sequences(questions, 'question_text'))\n","padded_contexts  = torch.tensor(prepare_padded_sequences(contexts, 'context_text'))\n","\n","mask_questions =  torch.tensor(np.where(padded_questions != 0, 1, 0))\n","mask_contexts  =  torch.tensor(np.where(padded_contexts != 0, 1, 0))\n","\n","with torch.no_grad():\n","    lhs_questions = bert_model(padded_questions, attention_mask=mask_questions).last_hidden_state\n","    lhs_contexts  = bert_model(padded_contexts, attention_mask=mask_contexts).last_hidden_state\n","\n","emb_questions = lhs_questions[:,0,:]\n","emb_contexts  = lhs_contexts[:,0,:]\n","\n","questions['embedding'] = list(emb_questions)\n","contexts['embedding']  = list(emb_contexts)"],"metadata":{"id":"-kJTjIk807QY"},"execution_count":null,"outputs":[]},{"cell_type":"code","execution_count":null,"metadata":{"id":"35ukWIxGuq_t","executionInfo":{"status":"ok","timestamp":1673911205035,"user_tz":300,"elapsed":26,"user":{"displayName":"Bill Power","userId":"17299628813846429758"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"a4911cb9-d238-4297-cb98-4fbb5b45b974"},"outputs":[{"output_type":"stream","name":"stdout","text":["q and ctx maps built\n"]}],"source":["map_q_emb = dict()\n","def build_q_map(row):\n","  global map_q_emb\n","  map_q_emb[row['question_id']] = row['embedding']\n","\n","map_ctx_emb = dict()\n","\n","def build_ctx_map(row):\n","  global map_ctx_emb\n","  map_ctx_emb[row['context_id']] = row['embedding']\n","\n","\n","questions.apply(build_q_map, axis=1)\n","contexts.apply(build_ctx_map, axis=1)\n","print(\"q and ctx maps built\")"]},{"cell_type":"markdown","source":["### Balancing - Over-Sampling Method"],"metadata":{"id":"Ee2A1EDh0Zgd"}},{"cell_type":"code","source":["def max_size_oversampling_wr(examples):\n","  question_counts = dict()\n","  context_counts  = dict()\n","  \n","  for _, _, _, _, ctx, q in examples:\n","    if q not in question_counts:\n","      question_counts[q] = 0\n","    question_counts[q] += 1\n","    \n","    if ctx not in context_counts:\n","      context_counts[ctx] = 0\n","    context_counts[ctx] += 1\n","\n","  context_examples    = { k: [] for k in context_counts}\n","  context_populations = { k: [] for k in context_counts}\n","\n","  for emb_ctx, emb_q, emb_cnt, y, ctx, q in examples:\n","    context_populations[ctx].append([emb_ctx, emb_q, emb_cnt, y])\n","\n","  max_size = 0\n","  for k in context_populations:\n","    size_pop = len(context_populations[k])\n","    if size_pop > max_size:\n","      max_size = size_pop\n","\n","  for k in context_examples:\n","    while len(context_examples[k]) < max_size:\n","      context_examples[k].append(random.sample(context_populations[k], 1)[0])\n","\n","  example_tuples_max_sampled = []\n","  for k in context_examples:\n","    for ex in context_examples[k]:\n","      example_tuples_max_sampled.append(ex)\n","  return example_tuples_max_sampled"],"metadata":{"id":"g8b-jBO3zaM9"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["### Tuple Generation Method"],"metadata":{"id":"7EFQMMop0fyz"}},{"cell_type":"markdown","source":["This is the main method we call to turn a dataframe of content into a split and balanced set of training/test data. "],"metadata":{"id":"1sI_DhK5yo0A"}},{"cell_type":"code","source":["def make_example_tuples(df_content, balance=True):\n","  padded_content = torch.tensor(prepare_padded_sequences(df_content, 'content_text'))\n","  mask_content = torch.tensor(np.where(padded_content != 0, 1, 0))\n"," \n","  with torch.no_grad():\n","    lhs_content = bert_model(padded_content, attention_mask=mask_content).last_hidden_state\n","\n","  df_content['content-embedding'] = list(lhs_content[:,0,:]) \n","\n","  content_example_tuples = []\n","  def make_make_tuple(out_list):\n","    def make_tuple(row):  # COPY THIS PART RIGHT HERE for exp building later - see notes\n","      exp = [map_ctx_emb[row['context_id']],\n","            map_q_emb[row['question_id']],\n","            row['content-embedding'],\n","            row['answer'],\n","            row['context_id'],\n","            row['question_id']]\n","      out_list.append(exp)\n","    return make_tuple\n","\n","  df_content.apply(make_make_tuple(content_example_tuples), axis=1)\n","\n","  if balance:\n","    return max_size_oversampling_wr(content_example_tuples)\n","  else:\n","    return content_example_tuples"],"metadata":{"id":"at-9T_v0h60u"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["# Training/Evaluation Setup"],"metadata":{"id":"8FoP5ForAtkE"}},{"cell_type":"markdown","metadata":{"id":"RB2B2S8mPFxJ"},"source":["## Test-Train Split, Batching"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"FKixJD1p8kTY"},"outputs":[],"source":["def create_test_batch(tuples):\n","  q_test   = torch.stack([i[0] for i in tuples])\n","  ctx_test = torch.stack([i[1] for i in tuples])\n","  cnt_test = torch.stack([i[2] for i in tuples])\n","\n","  y_test   = torch.tensor([[i[3] for i in tuples]], dtype=torch.float)\n","  y_test   = torch.reshape(y_test, (-1, 1))\n","  return [q_test, ctx_test, cnt_test], y_test\n","\n","\n","def create_test_train_batches(tuples, test_frac=TEST_FRAC, batch_size=BATCH_SIZE):\n","  NUM_TRAIN = int((1-test_frac)*len(tuples))\n","\n","  if test_frac == 0:\n","    train_tuples = tuples\n","    test_tuples = None\n","  else:\n","    train_tuples = tuples[:NUM_TRAIN]\n","    test_tuples  = tuples[NUM_TRAIN:]\n","\n","  if batch_size == -1:\n","    batch_size = NUM_TRAIN\n","\n","  training_batches = [train_tuples[i:i+batch_size] for i in range(int(NUM_TRAIN/batch_size))]\n","\n","  # Stack the tensors inside each batch, so its still 1 tuple per batch\n","  training_stacked = []\n","  for batch in training_batches:\n","    q_tensors   = [i[0] for i in batch]\n","    ctx_tensors = [i[1] for i in batch]\n","    cnt_tensors = [i[2] for i in batch]\n","    y_tensor    = torch.tensor([i[3] for i in batch], dtype=torch.float)\n","    training_stacked.append([torch.stack(q_tensors),\n","                            torch.stack(ctx_tensors),\n","                            torch.stack(cnt_tensors),\n","                            torch.reshape(y_tensor, (-1, 1))])\n","  if test_frac == 0:\n","    test_batch, y_test = None, None\n","  else:\n","    test_batch, y_test = create_test_batch(test_tuples)\n","\n","  return training_stacked, test_batch, y_test"]},{"cell_type":"markdown","metadata":{"id":"rPCF7MZNzOAT"},"source":["## Model Implementation"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"UYqqeGe8zVd8"},"outputs":[],"source":["import torch.nn.functional as F\n","from torch.nn import Module, RNN, Linear, BCELoss, LogSoftmax, BatchNorm1d\n","\n","NUM_BERT_FEATURES = 768\n","\n","HL_QUESTION = 16\n","HL_CONTEXTS = 16\n","HL_CONTENT  = 16\n","HL_PRED = 8\n","\n","class AQAM(torch.nn.Module):\n","    def __init__(self):\n","        super().__init__()\n","        # 3 MLP Stacks\n","        self.q_linear1   = Linear(NUM_BERT_FEATURES, HL_QUESTION)\n","        self.ctx_linear1 = Linear(NUM_BERT_FEATURES, HL_CONTEXTS)\n","        self.content_linear1 = Linear(NUM_BERT_FEATURES, HL_CONTENT)\n","        \n","        # Prediction Layers\n","        self.pred_linear1 = Linear(HL_QUESTION+HL_CONTEXTS+HL_CONTENT, HL_PRED)\n","        self.pred_linear2 = Linear(HL_PRED, 1)\n","\n","        # Batch Norms\n","        # self.bn_q    = BatchNorm1d(HL_QUESTION)\n","        # self.bn_ctx  = BatchNorm1d(HL_CONTEXTS)\n","        # self.bn_cnt  = BatchNorm1d(HL_CONTENT) \n","\n","        # self.bn_triple = BatchNorm1d(HL_QUESTION+HL_CONTEXTS+HL_CONTENT)\n","        self.bn_cat  = BatchNorm1d(HL_PRED) \n","\n","    def forward(self, data):\n","        emb_q, emb_ctx, emb_cnt = data[0], data[1], data[2]\n","\n","        # The 3 Heads - Question, Context, Content spaces.\n","        ls_q   = self.q_linear1(emb_q)\n","        ls_q   = F.relu(ls_q)\n","\n","        ls_ctx = self.ctx_linear1(emb_ctx)\n","        ls_ctx = F.relu(ls_ctx)\n","        \n","        ls_cnt = self.content_linear1(emb_cnt)\n","        ls_cnt = F.relu(ls_cnt)\n","\n","        # Note - Needed to make this work 1-dimension 'up', to make it work\n","        #        with batches. basically needed to skip the 0th batch dim.\n","        # ls_cat = torch.cat((self.bn_q(ls_q), \n","        #                     self.bn_ctx(ls_ctx), \n","        #                     self.bn_cnt(ls_cnt)), \n","        #                    dim=1)\n","        ls_cat = torch.cat((ls_q, ls_ctx, ls_cnt), dim=1)\n","        \n","        # Prediction Layers\n","        ls_cat = self.pred_linear1(ls_cat)\n","        ls_cat = self.bn_cat(F.relu(ls_cat))\n","        pred   = self.pred_linear2(ls_cat)\n","        \n","        return pred"]},{"cell_type":"markdown","metadata":{"id":"h6ilu9ax8bze"},"source":["## Training and Evaluation Method"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"f2D3fYj89Bpz"},"outputs":[],"source":["from torch.optim import SGD"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"MaoTTbX0BfNN"},"outputs":[],"source":["def binary_acc(y_pred, y_test):\n","  # Where we handle the sigmoid for the BC\n","  y_pred_tag = torch.round(torch.sigmoid(y_pred))\n","  correct_results_sum = (y_pred_tag == y_test).sum().float()\n","  acc = correct_results_sum/float(y_test.shape[0])\n","  return acc"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"ynT43r7n9s2P"},"outputs":[],"source":["def train_and_evaluate(training_batches, test_batches, epochs, model=None):\n","  if model is None:\n","    model = AQAM()\n","  \n","  optimizer = SGD(model.parameters(), lr=0.001, momentum=0.9)\n","  criterion = torch.nn.BCEWithLogitsLoss()\n","\n","  train_accs = []\n","  test_accs  = [[] for _ in test_batches]\n","  for epoch in tqdm(range(epochs), unit=\"epoch\"):\n","    model.train()\n","    optimizer.zero_grad()\n","    \n","    batch_accs = []\n","    for batch in training_batches:\n","      out = model(batch)\n","      labels = batch[3]\n","      loss = criterion(out, labels)\n","      loss.backward()\n","      optimizer.step()\n","      batch_accs.append(binary_acc(out, labels))\n","\n","    train_accs.append(sum(batch_accs)/float(len(batch_accs)))\n","\n","    model.eval()\n","    for t_idx, [test_batch, test_labels] in enumerate(test_batches):\n","      test_out = model(test_batch)\n","      test_accs[t_idx].append(binary_acc(test_out, test_labels))\n","\n","  return train_accs, test_accs, model"]},{"cell_type":"markdown","source":["# Data Augmentation Method"],"metadata":{"id":"8cTZOWro-7PN"}},{"cell_type":"code","source":["def make_ex(raw_row):\n","  ex = (torch.reshape(map_ctx_emb[raw_row['context_id']], (1, -1)),\n","        torch.reshape(map_q_emb[raw_row['question']], (1, -1)),\n","        torch.reshape(raw_row['content-embedding'], (1, -1)))\n","  return ex\n","  \n","\n","def augment_dataframe(df_raw, aug_model):\n","  # padded_content = torch.tensor(prepare_padded_sequences(df_raw, 'text'))\n","  # mask_content = torch.tensor(np.where(padded_content != 0, 1, 0))\n","  \n","  # print(\"embedding raw content\")\n","  # with torch.no_grad():\n","  #   lhs_content = bert_model(padded_content, attention_mask=mask_content).last_hidden_state\n","\n","  # df_raw['content-embedding'] = list(lhs_content[:,0,:]) \n","\n","  print(\"grouping\")\n","  df_answers = df_raw.groupby(by=['ccp_comment_id', 'question'], group_keys=True)\n","  raws_fa  = []\n","  raws_maj = []\n","  print(\"labeling embedded content with aug_model\")\n","  for g_name, group in df_answers:\n","\n","    \n","    ans_1 = group.values[0][5]\n","    ans_2 = group.values[1][5]\n","    print(g_name)\n","    ans_model = torch.round(torch.sigmoid(aug_model(make_ex(group.iloc[0]))))\n","\n","    if ans_1 == ans_2 and ans_1 == ans_model:\n","      raws_fa.append(group.values[0])\n","    else:\n","      if ans_1 == ans_model:\n","        raws_maj.append(group.values[0])\n","      else: # Model must equal ans_2\n","        raws_maj.append(group.values[1])\n","  \n","  df_fa  = pd.Dataframe(raws_fa,  columns=df_raw.columns)\n","  df_maj = pd.Dataframe(raws_maj, columns=df_raw.columns) \n","  return df_fa, df_maj\n"],"metadata":{"id":"dZuHBCDd-6vs"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["# Experiment"],"metadata":{"id":"lU6umJAFr3Te"}},{"cell_type":"markdown","source":["### EXP0 - Train Baseline Model on A3-MAJ+"],"metadata":{"id":"vnFik8cqKFo8"}},{"cell_type":"code","source":["# Balance/Split A3 Data -> Test, Train\n","bal_exs_A3_majplus = make_example_tuples(content_a3_majplus)\n","random.shuffle(bal_exs_A3_majplus)\n","a3_mp_ttbs = create_test_train_batches(bal_exs_A3_majplus)\n","a3_mp_train_batches, a3_mp_test_x, a3_mp_test_labels = a3_mp_ttbs\n","\n","# Treat A2-FA data as the A2 test data. Already have this. \n","# We want to create a validation set, so lets divide the A2-FA data\n","# into two sets of data. We'll use one to train, and one to validate\n","# across all the experiments. 50/50 seems good?\n","test_exs_A2_fa = make_example_tuples(content_a2_fa, balance=False)\n","random.shuffle(test_exs_A2_fa)\n","a2_fa_ttbs = create_test_train_batches(test_exs_A2_fa,\n","                                       test_frac=0.5)\n","a2_fa_train_batches, a2_fa_test_x, a2_fa_test_labels = a2_fa_ttbs\n","\n","# train/eval A3-model on A3 Maj+ training data\n","#   - Pass in A3 test data\n","#   - Pass in A2-FA test data - Does it agree with the FA?\n","test_batches = [\n","  [a3_mp_test_x, a3_mp_test_labels],\n","  [a2_fa_test_x, a2_fa_test_labels]\n","]\n","train_acc_pre, test_accs_pre, a3_model = train_and_evaluate(a3_mp_train_batches, \n","                                                            test_batches,\n","                                                            EPOCHS)\n","\n","# TODO - Can we copy a model? If so we need to copy the trained A3-model here\n","#        need one each for the 'online training' experiments below"],"metadata":{"id":"Aap8UKcgr2ly","colab":{"base_uri":"https://localhost:8080/","height":125,"referenced_widgets":["49b5220b9ba9486ba8bd03a887330ca1","b9ecf085947d4f50ab141e85bd3908fe","61d9a506d673427baf1729f8bbe10043","397367a8b05243cfb730a4bcbeb5cecd","c1795034b90044ffb014bb3424f9bffb","752a1e81d79d4339a8f3c357e69b7c27","a6251b5320a8450abcd00e4fdc49fafe","78c73f5e529e4a37832dca8e22a3b98a","90b368a0c2be4828be00b6f983875dcf","9ef1d362f258408987c6e2e950eb23ac","50209b70ba78488db317d57de1e924a7"]},"executionInfo":{"status":"ok","timestamp":1673912902431,"user_tz":300,"elapsed":136185,"user":{"displayName":"Bill Power","userId":"17299628813846429758"}},"outputId":"a26eb66c-00cc-474a-9170-6a022d0d8854"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["  0%|          | 0/40 [00:00<?, ?epoch/s]"],"application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"49b5220b9ba9486ba8bd03a887330ca1"}},"metadata":{}}]},{"cell_type":"markdown","source":["#### Results - Baseline Epoch Losses"],"metadata":{"id":"xmQldHMTWfl-"}},{"cell_type":"markdown","source":["Here we just want to see the per-epoch training and test losses. We have multiple sets of test data to consider (2 for now). Need a graph that shows all 3 lines. \n","\n","This will give a baseline to compare against when we look at the effect of online training the model later (EXP1)."],"metadata":{"id":"LD0tWMduZFiK"}},{"cell_type":"code","source":["import matplotlib.pyplot as plt\n","%matplotlib notebook\n","%matplotlib inline"],"metadata":{"id":"Uo-1hODT9H9A"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["labels = [\"A3 Maj+\", \"A2 FA\"]\n","colors = [\"tab:green\", \"tab:blue\"]\n","\n","for l, test, color in zip(labels, test_accs_pre, colors):\n","  plt.plot(test[:cutoff], label=f\"{l}\", color=color)\n","\n","plt.title(\"Baseline Model Test Acc's\")\n","plt.legend(loc='lower left')\n","plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":54},"id":"2gIe1FpyWd8f","executionInfo":{"status":"ok","timestamp":1673912902434,"user_tz":300,"elapsed":37,"user":{"displayName":"Bill Power","userId":"17299628813846429758"}},"outputId":"b16dd1ac-ef9c-461d-92b5-91b225dac2a9"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 1 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"light"}}]},{"cell_type":"markdown","source":["#### Results - Baseline Model Output vs A2 Data"],"metadata":{"id":"CG32kbLPY-BY"}},{"cell_type":"markdown","source":["In this section we look at how often the train model agrees or disagrees with the A2-FA data. That is, for the A2 (Questions with at least 2 annotators answering) FA (Full Agreement, so both of the 2 annotators have the same answer), we want to see how often the model agrees with the label given by the annotators. \n","\n","Note - these are going to be results from JUST the A2 training data. Still holding out the test data for later. But I guess we could also look at that? "],"metadata":{"id":"M5IatMb8ZWne"}},{"cell_type":"code","source":["# We have a list of tensors (batches) jsut need to restack them\n","# a2_train_batches => ([tensors], [scalars]), ...\n","a2fa_batch_tensors = [[b[0], b[1], b[2]] for b in a2_fa_train_batches]\n","a2fa_label_tensors = [b[3] for b in a2_fa_train_batches]\n","\n","a2_fa_train_batch = [\n","    torch.cat([b[0] for b in a2_fa_train_batches], dim=0),\n","    torch.cat([b[1] for b in a2_fa_train_batches], dim=0),\n","    torch.cat([b[2] for b in a2_fa_train_batches], dim=0),\n","    torch.cat([b[3] for b in a2_fa_train_batches], dim=0)\n","]\n","a2_fa_train_labels = torch.cat([b[3] for b in a2_fa_train_batches], dim=0)"],"metadata":{"id":"AErHMdhmcoPA"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["Quick sanity check. "],"metadata":{"id":"USdP4u2r7_mI"}},{"cell_type":"code","source":["print(a2_fa_train_batch[0].shape, a2_fa_train_batch[1].shape, a2_fa_train_batch[2].shape)\n","print(a2_fa_train_labels.shape)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"etxtGvv35qrJ","executionInfo":{"status":"ok","timestamp":1673912902435,"user_tz":300,"elapsed":29,"user":{"displayName":"Bill Power","userId":"17299628813846429758"}},"outputId":"e86607db-4c72-4e65-ab19-7170f79be769"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["torch.Size([1152, 768]) torch.Size([1152, 768]) torch.Size([1152, 768])\n","torch.Size([1152, 1])\n"]}]},{"cell_type":"code","source":["# So now we have test/train batches, and cna do the thing. \n","a3_model.eval()\n","a2_fa_y_pred = torch.round(torch.sigmoid(a3_model(a2_fa_train_batch)))\n","\n","# Now we have a pred and known labels. We want to create a mask based on\n","# the labels matching the pred, and use that to create a new tensor.\n","\n","# We want to figure out the indexes? then create a new one based on those?\n","a3_agree = []\n","a3_disag = []\n","for id in range(len(a2_fa_y_pred)):\n","\n","  ex_tuple = [a2_fa_train_batch[0][id],\n","              a2_fa_train_batch[1][id],\n","              a2_fa_train_batch[2][id],\n","              a2_fa_train_batch[3][id]]\n","\n","  if a2_fa_y_pred[id] == a2_fa_train_labels[id]:\n","    a3_agree.append(ex_tuple)\n","  else:\n","    a3_disag.append(ex_tuple)"],"metadata":{"id":"XliBt9QyqqAz"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["print(f\"A2-FA (Training) that agree with model: {len(a3_agree)}/{len(a2_fa_y_pred)}\")\n","print(f\"A2-FA (Training) that disag with model: {len(a3_disag)}/{len(a2_fa_y_pred)}\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Uk_ofEO1trQR","executionInfo":{"status":"ok","timestamp":1673912902437,"user_tz":300,"elapsed":26,"user":{"displayName":"Bill Power","userId":"17299628813846429758"}},"outputId":"ff6df5e9-ecc9-48fc-bccc-9d9699734d9a"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["A2-FA (Training) that agree with model: 210/1152\n","A2-FA (Training) that disag with model: 942/1152\n"]}]},{"cell_type":"markdown","source":["We now have enough fodder to build additional training data using either of these sets. We still have a test batch held out thats not included in the above numbers."],"metadata":{"id":"TzDVEIWJua9U"}},{"cell_type":"markdown","source":["## EXP1 - Online, A2-AUG-FA"],"metadata":{"id":"bC77UeWLJtJe"}},{"cell_type":"code","source":["# we first need to create the augmented data set by\n","# including just the training data batches from above\n","# this is basically just making a3_agree list into a \n","# set of batched training examples. \n","a3_aug_training_batches, _, _ = create_test_train_batches(a3_agree, \n","                                                          test_frac=0,\n","                                                          batch_size=BATCH_SIZE)"],"metadata":{"id":"P6O-LV2usYQ9"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# EXP1\n","#   - 'Online' Train  current A3-model on A2-Aug-FA for additional epochs\n","#       * Pass in original A3 test data\n","#       * Pass in A2-FA test data\n","\n","exp1_test_batches = [\n","    [a3_mp_test_x, a3_mp_test_labels], # The original test set, from Maj+ A3 data\n","    [a2_fa_test_x, a2_fa_test_labels]  # The 'new' test set, from the A2 data\n","]\n","\n","train_acc_exp1, test_accs_exp1, _ = train_and_evaluate(a3_aug_training_batches,\n","                                                       exp1_test_batches,\n","                                                       EPOCHS,\n","                                                       model=a3_model)"],"metadata":{"id":"yv-7kyvKJb_5","colab":{"base_uri":"https://localhost:8080/","height":125,"referenced_widgets":["ba431fcc0a0d40ff99254d9d5cb3f704","5f0142aa2eb1462cadde949063818291","ca7f7f17c9d046fcadc3c1311ee07aed","8aeb12a0006a497198fd3c5da3112104","3822c7d37b854d2cb879c1879ed10664","90681895a3a24ecbab5f148f1717d369","bee4a4b6912b4ad1a93397e1d64948ad","cca9d1c1eca045b6b314ab521e04d13d","86d820f1a2bf4ac88196fa997aefdee5","c8079b05cc124302864ed09d2b4b41cc","6f6781b90caf498e958071f540af89f3"]},"executionInfo":{"status":"ok","timestamp":1673912902920,"user_tz":300,"elapsed":504,"user":{"displayName":"Bill Power","userId":"17299628813846429758"}},"outputId":"c671dbc9-a99e-4d53-8e68-1f18d4648432"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["  0%|          | 0/40 [00:00<?, ?epoch/s]"],"application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"ba431fcc0a0d40ff99254d9d5cb3f704"}},"metadata":{}}]},{"cell_type":"markdown","source":["#### Results - Online Trained Epoch Losses"],"metadata":{"id":"5hkbBq9PaIxT"}},{"cell_type":"code","source":["labels = [\"A3 Maj+\", \"A2 FA\"]\n","colors = [\"tab:green\", \"tab:blue\"]\n","\n","for l, test, color in zip(labels, test_accs_pre, colors):\n","  plt.plot(test[:cutoff], label=f\"{l}\", color=color)\n","\n","plt.title(\"Online Trained Test Acc's\")\n","plt.legend(loc='lower left')\n","plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":54},"id":"0k-X7J1S8tGQ","executionInfo":{"status":"ok","timestamp":1673912902922,"user_tz":300,"elapsed":17,"user":{"displayName":"Bill Power","userId":"17299628813846429758"}},"outputId":"6c2c608a-29a1-48d4-a4a8-941636692a21"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 1 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"light"}}]},{"cell_type":"markdown","source":["## EXP2 - Fresh, A2-AUG-FA\n"],"metadata":{"id":"51Y1tIwwJyiu"}},{"cell_type":"code","source":["# EXP2\n","#   - Train FRESH model on A3 + A2-Aug-FA\n","#       * Pass in original A3 test data\n","#       * Pass in A2-FA test data"],"metadata":{"id":"Frp0AHRxJg1n"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["## EXP3 - Online, A2-AUG-FA,MAJ\n"],"metadata":{"id":"qEbmfpMAJ3vZ"}},{"cell_type":"code","source":["# EXP3\n","#   - 'Online' Train  current A3-model on A2-Aug-FA,MAJ for additional epochs\n","#       * Pass in original A3 test data\n","#       * Pass in A2-FA test data"],"metadata":{"id":"YdCnLy8GJnxE"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["## EXP4 - Fresh, A2-AUG-FA,MAJ\n"],"metadata":{"id":"sPi9fpKzJ4CF"}},{"cell_type":"code","source":["# EXP4\n","#   - Train FRESH model on A3 + A2-Aug-FA,MAJ\n","#       * Pass in original A3 test data\n","#       * Pass in A2-FA test data"],"metadata":{"id":"TgVN1d9MJoQf"},"execution_count":null,"outputs":[]}]}