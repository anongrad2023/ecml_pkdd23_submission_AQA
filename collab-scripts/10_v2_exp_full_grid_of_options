{"cells":[{"cell_type":"markdown","metadata":{"id":"YuzMQZmetiR7"},"source":["# Overview"]},{"cell_type":"markdown","metadata":{"id":"BR1iazOytmWv"},"source":["In this script, we'll generate the outputs for the experiments listed in your weekly notes for 2023-02-20. \n","\n","This means creating the pre and post-training tSNE visualizations and model validation accuracy's for the various configurations of content+context+question embeddings. \n","\n","TODO - Copy over any relevant notes and visuals. \n","\n","VERSION NOTE - Working on getting the agree/disagree working for the embeddings. "]},{"cell_type":"code","execution_count":null,"metadata":{"id":"4xiQ_8oVtQmB","executionInfo":{"status":"ok","timestamp":1678903352329,"user_tz":240,"elapsed":12,"user":{"displayName":"Bill Power","userId":"17299628813846429758"}}},"outputs":[],"source":[]},{"cell_type":"markdown","metadata":{"id":"AbeAB8Hokb-2"},"source":["# Setup"]},{"cell_type":"markdown","metadata":{"id":"ybu8iEZskb-3"},"source":["## Imports"]},{"cell_type":"code","execution_count":1,"metadata":{"id":"JiAEt7P6kb-3","executionInfo":{"status":"ok","timestamp":1678903355268,"user_tz":240,"elapsed":2949,"user":{"displayName":"Bill Power","userId":"17299628813846429758"}}},"outputs":[],"source":["import os\n","import numpy as np\n","import pandas as pd\n","from sklearn.model_selection import train_test_split\n","from sklearn.linear_model import LogisticRegression\n","from sklearn.model_selection import GridSearchCV\n","from sklearn.model_selection import cross_val_score\n","import torch\n","import random\n","import warnings\n","warnings.filterwarnings('ignore')\n","\n","from tqdm.notebook import tqdm\n","import pickle"]},{"cell_type":"markdown","metadata":{"id":"0fSMAjHpkb-4"},"source":["## Constants"]},{"cell_type":"code","execution_count":2,"metadata":{"id":"UNU4HLNZkb-5","executionInfo":{"status":"ok","timestamp":1678903355271,"user_tz":240,"elapsed":28,"user":{"displayName":"Bill Power","userId":"17299628813846429758"}}},"outputs":[],"source":["RESULTS_GCS_DIR = \"results/AQA10_v2\"\n","\n","GCS_APP_ID = \"aqa-research\"\n","GCS_BUCKET = \"dabi-aqa-data-00\"\n","\n","FN_QUESTIONS = \"questions_01.csv\"\n","FN_CONTEXTS  = \"contexts_01.csv\"\n","\n","FN_A2_RAW = \"a2_raw.csv\"\n","FN_A2_FA  = \"a2_gs.csv\"\n","FN_A3_FA  = \"a3_gs.csv\"\n","FN_A3_MAJ = \"a3_con.csv\"\n","\n","MAX_SEQ_LEN = 128\n","\n","EPOCHS = 25\n","BATCH_SIZE = 16\n","TEST_FRAC = 0.1\n","\n","RAND_SEED = 4246"]},{"cell_type":"markdown","metadata":{"id":"glKP3nrhkb-6"},"source":["## GCS Auth - Input Needed"]},{"cell_type":"code","execution_count":3,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":24832,"status":"ok","timestamp":1678903380080,"user":{"displayName":"Bill Power","userId":"17299628813846429758"},"user_tz":240},"id":"xwxl9-b4kb-7","outputId":"e019379e-0252-4105-c1d4-03f665ce044d"},"outputs":[{"output_type":"stream","name":"stdout","text":["Go to the following link in your browser:\n","\n","    https://accounts.google.com/o/oauth2/auth?response_type=code&client_id=32555940559.apps.googleusercontent.com&redirect_uri=https%3A%2F%2Fsdk.cloud.google.com%2Fauthcode.html&scope=openid+https%3A%2F%2Fwww.googleapis.com%2Fauth%2Fuserinfo.email+https%3A%2F%2Fwww.googleapis.com%2Fauth%2Fcloud-platform+https%3A%2F%2Fwww.googleapis.com%2Fauth%2Fappengine.admin+https%3A%2F%2Fwww.googleapis.com%2Fauth%2Fsqlservice.login+https%3A%2F%2Fwww.googleapis.com%2Fauth%2Fcompute+https%3A%2F%2Fwww.googleapis.com%2Fauth%2Faccounts.reauth&state=72SBdFQlpQ0O435MnqHryVTCDd894z&prompt=consent&access_type=offline&code_challenge=aFtB6DxpepCA0hNuiSBeLLr5AEC6N5V3qYMNcPRuZc4&code_challenge_method=S256\n","\n","Enter authorization code: 4/0AWtgzh70AXkwTZxhMfmoSY2Mjf1UZXInRCg-VRMz8f8Up3pd4IWpk6v6UPnccL-nsP7M6A\n","\n","You are now logged in as [willpowe@gmail.com].\n","Your current project is [None].  You can change this setting by running:\n","  $ gcloud config set project PROJECT_ID\n"]}],"source":["!gcloud auth login --launch-browser"]},{"cell_type":"code","execution_count":4,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":1178,"status":"ok","timestamp":1678903381244,"user":{"displayName":"Bill Power","userId":"17299628813846429758"},"user_tz":240},"id":"SEQdfjlikb-7","outputId":"811a2722-f13f-4ab1-cbd6-360cc17ffd20"},"outputs":[{"output_type":"stream","name":"stdout","text":["Updated property [core/project].\n"]}],"source":["!gcloud config set project {GCS_APP_ID}"]},{"cell_type":"code","execution_count":5,"metadata":{"id":"1x_hDs2gkb-8","executionInfo":{"status":"ok","timestamp":1678903381247,"user_tz":240,"elapsed":10,"user":{"displayName":"Bill Power","userId":"17299628813846429758"}}},"outputs":[],"source":["def download_file_from_gcs(src_fn, dest_fn):\n","  dest = f\"/content/{dest_fn}\"\n","  dl_command = f\"gsutil -m cp gs://{GCS_BUCKET}/{src_fn} {dest}\"\n","  os.system(dl_command)\n","\n","def upload_file_to_gcs(src_fn, dest_fn):\n","  dest_url = \"{}/{}\".format(GCS_BUCKET, dest_fn)\n","  ul_command = \"gsutil -m cp {} gs://{}\".format(src_fn, dest_url)\n","  os.system(ul_command)"]},{"cell_type":"markdown","metadata":{"id":"Df9iIZyhkb--"},"source":["## Raw Data"]},{"cell_type":"code","execution_count":6,"metadata":{"id":"YOIG4PnXkb-_","executionInfo":{"status":"ok","timestamp":1678903397555,"user_tz":240,"elapsed":16316,"user":{"displayName":"Bill Power","userId":"17299628813846429758"}}},"outputs":[],"source":["download_file_from_gcs(FN_QUESTIONS, FN_QUESTIONS)\n","download_file_from_gcs(FN_CONTEXTS, FN_CONTEXTS)\n","\n","download_file_from_gcs(FN_A2_RAW, FN_A2_RAW)\n","download_file_from_gcs(FN_A2_FA, FN_A2_FA)\n","download_file_from_gcs(FN_A3_FA, FN_A3_FA)\n","download_file_from_gcs(FN_A3_MAJ, FN_A3_MAJ)"]},{"cell_type":"markdown","metadata":{"id":"tzRLOi-Jkb-_"},"source":["## BERT Setup"]},{"cell_type":"code","execution_count":7,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":10943,"status":"ok","timestamp":1678903408487,"user":{"displayName":"Bill Power","userId":"17299628813846429758"},"user_tz":240},"id":"C_lWu_g_kb_A","outputId":"4eaa307d-834c-44da-856c-3d5790329e57"},"outputs":[{"output_type":"stream","name":"stdout","text":["Looking in indexes: https://pypi.org/simple, https://us-python.pkg.dev/colab-wheels/public/simple/\n","Collecting transformers\n","  Downloading transformers-4.27.0-py3-none-any.whl (6.8 MB)\n","\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m6.8/6.8 MB\u001b[0m \u001b[31m99.8 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hRequirement already satisfied: filelock in /usr/local/lib/python3.9/dist-packages (from transformers) (3.9.0)\n","Requirement already satisfied: numpy>=1.17 in /usr/local/lib/python3.9/dist-packages (from transformers) (1.22.4)\n","Collecting tokenizers!=0.11.3,<0.14,>=0.11.1\n","  Downloading tokenizers-0.13.2-cp39-cp39-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (7.6 MB)\n","\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m7.6/7.6 MB\u001b[0m \u001b[31m93.8 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hCollecting huggingface-hub<1.0,>=0.11.0\n","  Downloading huggingface_hub-0.13.2-py3-none-any.whl (199 kB)\n","\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m199.2/199.2 KB\u001b[0m \u001b[31m25.5 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hRequirement already satisfied: tqdm>=4.27 in /usr/local/lib/python3.9/dist-packages (from transformers) (4.65.0)\n","Requirement already satisfied: packaging>=20.0 in /usr/local/lib/python3.9/dist-packages (from transformers) (23.0)\n","Requirement already satisfied: regex!=2019.12.17 in /usr/local/lib/python3.9/dist-packages (from transformers) (2022.6.2)\n","Requirement already satisfied: pyyaml>=5.1 in /usr/local/lib/python3.9/dist-packages (from transformers) (6.0)\n","Requirement already satisfied: requests in /usr/local/lib/python3.9/dist-packages (from transformers) (2.25.1)\n","Requirement already satisfied: typing-extensions>=3.7.4.3 in /usr/local/lib/python3.9/dist-packages (from huggingface-hub<1.0,>=0.11.0->transformers) (4.5.0)\n","Requirement already satisfied: chardet<5,>=3.0.2 in /usr/local/lib/python3.9/dist-packages (from requests->transformers) (4.0.0)\n","Requirement already satisfied: idna<3,>=2.5 in /usr/local/lib/python3.9/dist-packages (from requests->transformers) (2.10)\n","Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.9/dist-packages (from requests->transformers) (2022.12.7)\n","Requirement already satisfied: urllib3<1.27,>=1.21.1 in /usr/local/lib/python3.9/dist-packages (from requests->transformers) (1.26.15)\n","Installing collected packages: tokenizers, huggingface-hub, transformers\n","Successfully installed huggingface-hub-0.13.2 tokenizers-0.13.2 transformers-4.27.0\n"]}],"source":["!pip install transformers"]},{"cell_type":"code","execution_count":8,"metadata":{"id":"VA_ZnC0dkb_A","executionInfo":{"status":"ok","timestamp":1678903408907,"user_tz":240,"elapsed":427,"user":{"displayName":"Bill Power","userId":"17299628813846429758"}}},"outputs":[],"source":["import transformers as ppb"]},{"cell_type":"markdown","metadata":{"id":"TBwBOc1LJWSS"},"source":["## Random Seeds"]},{"cell_type":"code","execution_count":9,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":21,"status":"ok","timestamp":1678903408909,"user":{"displayName":"Bill Power","userId":"17299628813846429758"},"user_tz":240},"id":"HNrkkYVqJV62","outputId":"4e81e4a4-772d-463a-b94b-c3152f003964"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["<torch._C.Generator at 0x7fd2bd140fb0>"]},"metadata":{},"execution_count":9}],"source":["random.seed(RAND_SEED)\n","np.random.seed(RAND_SEED)\n","torch.manual_seed(RAND_SEED)"]},{"cell_type":"markdown","metadata":{"id":"YEniTxLUPL-K"},"source":["# Data"]},{"cell_type":"markdown","metadata":{"id":"zUUz0lb2yLAg"},"source":["## Content Dataframes"]},{"cell_type":"code","execution_count":10,"metadata":{"id":"WuLRs3tXkb_C","executionInfo":{"status":"ok","timestamp":1678903408910,"user_tz":240,"elapsed":17,"user":{"displayName":"Bill Power","userId":"17299628813846429758"}}},"outputs":[],"source":["questions = pd.read_csv(FN_QUESTIONS)\n","contexts  = pd.read_csv(FN_CONTEXTS)\n","\n","content_a2_raw = pd.read_csv(FN_A2_RAW)\n","content_a2_fa  = pd.read_csv(FN_A2_FA)\n","content_a3_fa  = pd.read_csv(FN_A3_FA)\n","content_a3_maj = pd.read_csv(FN_A3_MAJ)\n","\n","content_a3_majplus = pd.concat([content_a3_fa, content_a3_maj])\n","content_a3a2_mp    = pd.concat([content_a3_fa, content_a3_maj, content_a2_fa])"]},{"cell_type":"code","source":["print(len(content_a3a2_mp))\n","content_a3a2_mp = content_a3a2_mp[content_a3a2_mp['answer'] != 3]\n","print(len(content_a3a2_mp))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"B1hGz_ubbYe4","executionInfo":{"status":"ok","timestamp":1678903408911,"user_tz":240,"elapsed":15,"user":{"displayName":"Bill Power","userId":"17299628813846429758"}},"outputId":"4d64d4a0-9ede-4000-d9fd-dbdcee047cc0"},"execution_count":11,"outputs":[{"output_type":"stream","name":"stdout","text":["4549\n","4341\n"]}]},{"cell_type":"markdown","metadata":{"id":"kNQBRgQkkb_B"},"source":["## LLM Transformer Initalization\n","\n"]},{"cell_type":"code","execution_count":12,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":357,"referenced_widgets":["e49417381c674f629e16edd7608a95c6","8e300090a00643c08f92831904e8c789","4c5ed9bcee784f1aace376e8393273ab","c075b6710a7847b18591e15b3ab2e97f","a9d3c592873443a49c2f4db459efedb8","4df5eb4ef66d4967a4a34a429b4ccf65","f4551b89e778494189f0161592919dfd","c0d8f20485de4cef81f8612825e46499","b78547e08b43445b8d166232e9e94082","88285892e65d4a93a79a350d03e916f0","3ca4bccd227f4c9d8bb65273121af9a4","1c9bd1e809cb468bb4cb8f124c352c08","2f6ebb847aab471c98abe6374afdc1c7","1057fc115e0141f69bc3715abfef701c","4a4a40a62c8a44798f2662497c5ac3fc","1b81dd95366c4ebd96f66715d0073fe2","8d80b1be153741cb94ecc4669b0ecb0c","992c63b94b244a138eafe5474c294ad9","85b9fd0d931848e2a7aee36b4f9634cf","5ab1be39558540a4a47bb659701f8645","c37ad664943f4b1eb3ac7e759e3e7e15","79b58bb63e844eb78b25202c75ebbbf8","64187ea7359a4e0a8dc2da54f4cf9281","4cd05fd8b8f24d109b28c178b5f27451","3302367c81c84e9090f4c96b34376e94","b1fda3cf48314a96bc5ed2fefa9eb5d5","bb4b061198c94dad81fe3ba98ed84db5","e22e79f55ea24bddbc65efcb01958c2c","624d4e7164094270bc9096c21c828474","6ef5b77bce774ffdb2a80a513ebe09d4","b27dd13cbcc141f2a6c420b2b592dbf4","5715fb148bb34eb2bfd92510fdccbf33","bcd530ae724f4018852c9889ef1feaca"]},"executionInfo":{"elapsed":8025,"status":"ok","timestamp":1678903416925,"user":{"displayName":"Bill Power","userId":"17299628813846429758"},"user_tz":240},"id":"wrotnPAHkb_C","outputId":"f4476691-ed72-433f-a8bc-70d373de4b8e"},"outputs":[{"output_type":"display_data","data":{"text/plain":["Downloading (…)solve/main/vocab.txt:   0%|          | 0.00/232k [00:00<?, ?B/s]"],"application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"e49417381c674f629e16edd7608a95c6"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":["Downloading (…)okenizer_config.json:   0%|          | 0.00/28.0 [00:00<?, ?B/s]"],"application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"1c9bd1e809cb468bb4cb8f124c352c08"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":["Downloading (…)lve/main/config.json:   0%|          | 0.00/483 [00:00<?, ?B/s]"],"application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"64187ea7359a4e0a8dc2da54f4cf9281"}},"metadata":{}}],"source":["# For DistilBERT:\n","model_class, tokenizer_class, pretrained_weights = (ppb.DistilBertModel, ppb.DistilBertTokenizer, 'distilbert-base-uncased')\n","\n","## Want BERT instead of distilBERT? Uncomment the following line:\n","#model_class, tokenizer_class, pretrained_weights = (ppb.BertModel, ppb.BertTokenizer, 'bert-base-uncased')\n","\n","# TODO - figure out the above for the Q/A model. Might need a different\n","#        enough implementation/approach that it warrents a dif script. \n","#        It takes a masked input for the Q and options for multiple choice? idk. \n","\n","# Load pretrained model/tokenizer\n","tokenizer  = tokenizer_class.from_pretrained(pretrained_weights, truncate=True,)"]},{"cell_type":"markdown","metadata":{"id":"LOr21JIPpm8I"},"source":["## Create Example Tuples"]},{"cell_type":"markdown","metadata":{"id":"noOpZRP8yXpr"},"source":["### Question/Context Embedding Dicts"]},{"cell_type":"markdown","metadata":{"id":"IOoeD1gRUkyE"},"source":["These two data frames contain all the natural langauge content for the question and context strings. \n","\n","These will be used to build maps so we can quickly find the token sequence and attention mask for each individual context string and question string. This will be used later to build the individual training examples. "]},{"cell_type":"code","execution_count":13,"metadata":{"id":"Ad4YwoEX2otO","executionInfo":{"status":"ok","timestamp":1678903416926,"user_tz":240,"elapsed":17,"user":{"displayName":"Bill Power","userId":"17299628813846429758"}}},"outputs":[],"source":["def build_ts_am_map(df_in, text_col_name, id_col):\n","  ids   = df_in[id_col].values\n","  sents = df_in[text_col_name].values\n","\n","  token_seqs = []\n","  attn_masks = []\n","  id_2_tsam = dict()\n","  for id, sent in zip(ids, sents):\n","    enc_dict = tokenizer.encode_plus(\n","      sent,\n","      add_special_tokens = False,\n","      max_length = MAX_SEQ_LEN, \n","      pad_to_max_length = True,\n","      return_attention_mask = True,\n","      return_tensors = 'pt'\n","    )\n","    id_2_tsam[id] = [enc_dict['input_ids'], enc_dict['attention_mask']]\n","\n","  return id_2_tsam"]},{"cell_type":"code","execution_count":14,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":13,"status":"ok","timestamp":1678903416926,"user":{"displayName":"Bill Power","userId":"17299628813846429758"},"user_tz":240},"id":"5UiFFSXW-5i_","outputId":"7e9b016d-f231-421e-82c1-c8d75df666bb"},"outputs":[{"output_type":"stream","name":"stdout","text":["Index(['context_id', 'context_text'], dtype='object')\n"]}],"source":["print(contexts.columns)"]},{"cell_type":"code","execution_count":15,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":887,"status":"ok","timestamp":1678903417802,"user":{"displayName":"Bill Power","userId":"17299628813846429758"},"user_tz":240},"id":"35ukWIxGuq_t","outputId":"ad4bced7-a641-434b-d31e-16e78b573b80"},"outputs":[{"output_type":"stream","name":"stderr","text":["Truncation was not explicitly activated but `max_length` is provided a specific value, please use `truncation=True` to explicitly truncate examples to max length. Defaulting to 'longest_first' truncation strategy. If you encode pairs of sequences (GLUE-style) with the tokenizer you can select this strategy more precisely by providing a specific strategy to `truncation`.\n"]}],"source":["map_q_2_ts_am   = build_ts_am_map(questions, 'question_text', 'question_id')\n","map_ctx_2_ts_am = build_ts_am_map(contexts, 'context_text', 'context_id')"]},{"cell_type":"markdown","metadata":{"id":"Ee2A1EDh0Zgd"},"source":["### Balancing - Over-Sampling Method\n","\n","NOTE - This should work w.o changes? The variable name 'tsam_cnt' just doesn't represent the type of that variable well anymore. It now holds just the string for the context text. "]},{"cell_type":"code","execution_count":16,"metadata":{"id":"g8b-jBO3zaM9","executionInfo":{"status":"ok","timestamp":1678903417803,"user_tz":240,"elapsed":65,"user":{"displayName":"Bill Power","userId":"17299628813846429758"}}},"outputs":[],"source":["def max_size_oversampling_wr(examples):\n","  question_counts = dict()\n","  context_counts  = dict()\n","  \n","  for _, _, _, _, ctx, q in examples:\n","    if q not in question_counts:\n","      question_counts[q] = 0\n","    question_counts[q] += 1\n","    \n","    if ctx not in context_counts:\n","      context_counts[ctx] = 0\n","    context_counts[ctx] += 1\n","\n","  context_examples    = { k: [] for k in context_counts}\n","  context_populations = { k: [] for k in context_counts}\n","\n","  for example in examples:\n","    ctx = example[4] # This might change depending on shape of examples.\n","    context_populations[ctx].append(example)\n","\n","  max_size = 0\n","  for k in context_populations:\n","    size_pop = len(context_populations[k])\n","    if size_pop > max_size:\n","      max_size = size_pop\n","\n","  for k in context_examples:\n","    while len(context_examples[k]) < max_size:\n","      context_examples[k].append(random.sample(context_populations[k], 1)[0])\n","\n","  example_tuples_max_sampled = []\n","  for k in context_examples:\n","    for ex in context_examples[k]:\n","      example_tuples_max_sampled.append(ex)\n","  return example_tuples_max_sampled"]},{"cell_type":"markdown","metadata":{"id":"7EFQMMop0fyz"},"source":["## Create DataLoaders\n"]},{"cell_type":"code","execution_count":17,"metadata":{"id":"at-9T_v0h60u","executionInfo":{"status":"ok","timestamp":1678903417804,"user_tz":240,"elapsed":59,"user":{"displayName":"Bill Power","userId":"17299628813846429758"}}},"outputs":[],"source":["def preprocess_sentences(df_content, balance=True):\n","  content_example_tuples = []\n","  \n","  # Uses the maps created before to obtain token_seqs and attn_masks \n","  # for the questions and contexts. \n","  def make_make_tuple(out_list):\n","    def make_tuple(row):\n","      out_list.append([\n","          map_q_2_ts_am[row['question_id']],\n","          map_ctx_2_ts_am[row['context_id']],\n","          row['content_text'],\n","          row['answer'],\n","          row['context_id'],\n","          row['question_id']\n","      ])\n","    return make_tuple\n","  \n","  df_content.apply(make_make_tuple(content_example_tuples), axis=1)\n","\n","  if balance:\n","    tuples = max_size_oversampling_wr(content_example_tuples)\n","  else:\n","    tuples = content_example_tuples\n","\n","  labels = [i[3] for i in tuples]\n","  iids_questions = []\n","  iids_contexts  = []\n","  iids_contents  = []\n","  ams_questions = []\n","  ams_contexts  = []\n","  ams_contents  = []\n","\n","  for [ts_q, am_q], [ts_ctx, am_ctx], sent, _, _, _ in tuples:\n","    iids_questions.append(ts_q)\n","    iids_contexts.append(ts_ctx)\n","    ams_questions.append(am_q)\n","    ams_contexts.append(am_ctx)\n","\n","    enc_dict = tokenizer.encode_plus(\n","        sent,\n","        add_special_tokens = False,\n","        max_length = MAX_SEQ_LEN, \n","        pad_to_max_length = True,\n","        return_attention_mask = True,\n","        return_tensors = 'pt'\n","    )\n","    iids_contents.append(enc_dict['input_ids'])\n","    ams_contents.append(enc_dict['attention_mask'])\n","  \n","  iids_questions = torch.cat(iids_questions, dim=0)\n","  iids_contexts  = torch.cat(iids_contexts,  dim=0)\n","  iids_contents  = torch.cat(iids_contents,  dim=0)\n","  ams_questions =  torch.cat(ams_questions, dim=0)\n","  ams_contexts  =  torch.cat(ams_contexts,  dim=0)\n","  ams_contents  =  torch.cat(ams_contents,  dim=0)\n","  labels = torch.tensor(labels)\n","  labels = torch.reshape(labels, (-1,1))\n","  labels = labels.to(torch.float64)\n","  ret_obj = [\n","      iids_questions, \n","      ams_questions, \n","      iids_contexts, \n","      ams_contexts, \n","      iids_contents, \n","      ams_contents,\n","      labels\n","  ]\n","  return ret_obj"]},{"cell_type":"code","execution_count":18,"metadata":{"id":"2nnRjN4KIM-z","executionInfo":{"status":"ok","timestamp":1678903417805,"user_tz":240,"elapsed":55,"user":{"displayName":"Bill Power","userId":"17299628813846429758"}}},"outputs":[],"source":["# From: https://discuss.pytorch.org/t/how-to-enable-the-dataloader-to-sample-from-each-class-with-equal-probability/911/7\n","from sklearn.model_selection import StratifiedKFold\n","\n","class StratifiedBatchSampler:\n","    \"\"\"Stratified batch sampling\n","    Provides equal representation of target classes in each batch\n","    \"\"\"\n","    def __init__(self, y, batch_size, shuffle=True):\n","        # batch_size = batch_size-1 # FUTURE BILL - YOU DID THIS HACK\n","        y = torch.squeeze(y)\n","        if torch.is_tensor(y):\n","            y = y.numpy()\n","        assert len(y.shape) == 1, 'label array must be 1D'\n","        \n","        n_batches = int(len(y) / batch_size)\n","        self.skf = StratifiedKFold(n_splits=n_batches, shuffle=shuffle)\n","        self.X = torch.randn(len(y),1).numpy()\n","        self.y = y\n","        self.shuffle = shuffle\n","\n","    def __iter__(self):\n","        if self.shuffle:\n","            self.skf.random_state = torch.randint(0,int(1e8),size=()).item()\n","        for train_idx, test_idx in self.skf.split(self.X, self.y):\n","            yield test_idx\n","\n","    def __len__(self):\n","        return len(self.y)"]},{"cell_type":"code","execution_count":19,"metadata":{"id":"wY3j6nyR0py9","executionInfo":{"status":"ok","timestamp":1678903417807,"user_tz":240,"elapsed":53,"user":{"displayName":"Bill Power","userId":"17299628813846429758"}}},"outputs":[],"source":["from torch.utils.data import TensorDataset, DataLoader, RandomSampler, SequentialSampler\n","from sklearn.model_selection import train_test_split\n","\n","# Note - I think that does it? Gross looking, but straightforward?\n","def create_dataloaders(df_content, test_ratio, balance=True):\n","  bigbagohtensors = preprocess_sentences(df_content, balance=balance)\n","  \n","  iids_q   = bigbagohtensors[0]\n","  ams_q    = bigbagohtensors[1] \n","  iids_ctx = bigbagohtensors[2]\n","  ams_ctx  = bigbagohtensors[3]\n","  iids_cnt = bigbagohtensors[4] \n","  ams_cnt  = bigbagohtensors[5] \n","  labels   = bigbagohtensors[6]  \n","\n","  train_idx, test_idx = train_test_split(\n","      np.arange(len(labels)),\n","      test_size = test_ratio,\n","      shuffle = True,\n","      stratify = labels)\n","  \n","  # \"Hey bill, should you google about the splat operator? Maybe.\"\n","  train_set = TensorDataset(iids_q[train_idx],\n","                            ams_q[train_idx],\n","                            iids_ctx[train_idx],\n","                            ams_ctx[train_idx],\n","                            iids_cnt[train_idx],\n","                            ams_cnt[train_idx],\n","                            labels[train_idx])\n","\n","  test_set = TensorDataset(iids_q[test_idx],\n","                           ams_q[test_idx],\n","                           iids_ctx[test_idx],\n","                           ams_ctx[test_idx],\n","                           iids_cnt[test_idx],\n","                           ams_cnt[test_idx],\n","                           labels[test_idx])\n","\n","  train_dataloader = DataLoader(train_set,\n","                                batch_sampler=StratifiedBatchSampler(labels[train_idx],\n","                                                                 BATCH_SIZE))\n","\n","  test_dataloader = DataLoader(test_set,\n","                               batch_sampler=StratifiedBatchSampler(labels[test_idx],\n","                                                                BATCH_SIZE))\n","\n","  return train_dataloader, test_dataloader"]},{"cell_type":"markdown","metadata":{"id":"rPCF7MZNzOAT"},"source":["# Model Implementations\n","\n"]},{"cell_type":"code","execution_count":20,"metadata":{"id":"UYqqeGe8zVd8","executionInfo":{"status":"ok","timestamp":1678903417807,"user_tz":240,"elapsed":49,"user":{"displayName":"Bill Power","userId":"17299628813846429758"}}},"outputs":[],"source":["import torch.nn.functional as F\n","from torch.nn import Module, RNN, Linear, BCELoss, LogSoftmax, BatchNorm1d\n","\n","NUM_BERT_FEATURES = 768\n","\n","HL_QUESTION = 128\n","HL_CONTEXTS = 128\n","HL_CONTENT  = 128\n","HL_PRED = 8"]},{"cell_type":"markdown","metadata":{"id":"BEHErFubuNSt"},"source":["## AQAM - Content-Only\n"]},{"cell_type":"code","execution_count":21,"metadata":{"id":"ychYUGstuNFp","executionInfo":{"status":"ok","timestamp":1678903417808,"user_tz":240,"elapsed":46,"user":{"displayName":"Bill Power","userId":"17299628813846429758"}}},"outputs":[],"source":["# TODO - Update model arch.\n","class AQAM_C(torch.nn.Module):\n","    def __init__(self):\n","        super().__init__()\n","\n","        # Transformer Embedding Layer\n","        self.bert_layer = model_class.from_pretrained(pretrained_weights,    \n","                                                      num_labels = 2,\n","                                                      output_attentions = False,\n","                                                      output_hidden_states = False,\n","                                                      return_dict=False)\n","\n","        self.content_linear1 = Linear(NUM_BERT_FEATURES, HL_CONTENT)\n","        \n","        # Prediction Layers\n","        self.pred_linear1 = Linear(HL_CONTENT, HL_PRED)\n","        self.pred_linear2 = Linear(HL_PRED, 1)\n","\n","        # Batch Norms\n","        self.bn_cnt  = BatchNorm1d(HL_CONTENT) \n","\n","    def forward(self, data):\n","        # tok_seq_q,   attn_mask_q   = data[0], data[1]\n","        # tok_seq_ctx, attn_mask_ctx = data[2], data[3]\n","        tok_seq_cnt, attn_mask_cnt = data[4], data[5]\n","        \n","        emb_cnt = self.bert_layer(tok_seq_cnt, \n","                                  attention_mask=attn_mask_cnt)[0][:, 0, :]\n","        \n","        ls_cnt = self.content_linear1(emb_cnt)\n","        ls_cnt = self.bn_cnt(ls_cnt)\n","        ls_cnt = F.relu(ls_cnt)\n","  \n","        # Prediction Layers\n","        ls_cnt = self.pred_linear1(ls_cnt)\n","        ls_cnt = F.relu(ls_cnt)\n","        return self.pred_linear2(ls_cnt)"]},{"cell_type":"markdown","metadata":{"id":"QpIXGQzpuh3L"},"source":["## AQAM - Content-Question\n"]},{"cell_type":"code","execution_count":22,"metadata":{"id":"fBEE3EGSuh3R","executionInfo":{"status":"ok","timestamp":1678903417810,"user_tz":240,"elapsed":43,"user":{"displayName":"Bill Power","userId":"17299628813846429758"}}},"outputs":[],"source":["# TODO - Update model arch.\n","class AQAM_CQ(torch.nn.Module):\n","    def __init__(self):\n","        super().__init__()\n","\n","        # Transformer Embedding Layer\n","        self.bert_layer = model_class.from_pretrained(pretrained_weights,    \n","                                                      num_labels = 2,\n","                                                      output_attentions = False,\n","                                                      output_hidden_states = False,\n","                                                      return_dict=False)\n","\n","        self.q_linear1       = Linear(NUM_BERT_FEATURES, HL_QUESTION)\n","        self.content_linear1 = Linear(NUM_BERT_FEATURES, HL_CONTENT)\n","        \n","        # Prediction Layers\n","        self.pred_linear1 = Linear(HL_QUESTION+HL_CONTENT, HL_PRED)\n","        self.pred_linear2 = Linear(HL_PRED, 1)\n","\n","        # Batch Norms\n","        self.bn_q    = BatchNorm1d(HL_QUESTION)\n","        self.bn_cnt  = BatchNorm1d(HL_CONTENT) \n","        self.bn_cat  = BatchNorm1d(HL_PRED) \n","\n","    def forward(self, data):\n","        tok_seq_q,   attn_mask_q   = data[0], data[1]\n","        # tok_seq_ctx, attn_mask_ctx = data[2], data[3]\n","        tok_seq_cnt, attn_mask_cnt = data[4], data[5]\n","        \n","        emb_q   = self.bert_layer(tok_seq_q,   \n","                                  attention_mask=attn_mask_q)[0][:, 0, :]\n","        emb_cnt = self.bert_layer(tok_seq_cnt, \n","                                  attention_mask=attn_mask_cnt)[0][:, 0, :]\n","\n","        ls_q   = self.q_linear1(emb_q)\n","        ls_q   = self.bn_q(ls_q)\n","        ls_q   = F.relu(ls_q)\n","        \n","        ls_cnt = self.content_linear1(emb_cnt)\n","        ls_cnt = self.bn_cnt(ls_cnt)\n","        ls_cnt = F.relu(ls_cnt)\n","\n","        ls_cat = torch.cat((ls_q, ls_cnt), dim=1)\n","        \n","        # Prediction Layers\n","        ls_cat = self.pred_linear1(ls_cat)\n","        # ls_cat = self.bn_cat(ls_cat)\n","        ls_cat = F.relu(ls_cat)\n","        return self.pred_linear2(ls_cat)"]},{"cell_type":"markdown","metadata":{"id":"OcCkIPGoumeR"},"source":["## AQAM - Content-Context\n"]},{"cell_type":"code","execution_count":23,"metadata":{"id":"g8rs08eVumeX","executionInfo":{"status":"ok","timestamp":1678903417811,"user_tz":240,"elapsed":41,"user":{"displayName":"Bill Power","userId":"17299628813846429758"}}},"outputs":[],"source":["# TODO - Update model arch.\n","class AQAM_CC(torch.nn.Module):\n","    def __init__(self):\n","        super().__init__()\n","\n","        # Transformer Embedding Layer\n","        self.bert_layer = model_class.from_pretrained(pretrained_weights,    \n","                                                      num_labels = 2,\n","                                                      output_attentions = False,\n","                                                      output_hidden_states = False,\n","                                                      return_dict=False)\n","\n","        self.ctx_linear1 = Linear(NUM_BERT_FEATURES, HL_CONTEXTS)\n","        self.content_linear1 = Linear(NUM_BERT_FEATURES, HL_CONTENT)\n","        \n","        # Prediction Layers\n","        self.pred_linear1 = Linear(HL_CONTEXTS+HL_CONTENT, HL_PRED)\n","        self.pred_linear2 = Linear(HL_PRED, 1)\n","\n","        # Batch Norms\n","        self.bn_ctx  = BatchNorm1d(HL_CONTEXTS)\n","        self.bn_cnt  = BatchNorm1d(HL_CONTENT) \n","\n","        self.bn_cat  = BatchNorm1d(HL_PRED) \n","\n","    def forward(self, data):\n","        # tok_seq_q,   attn_mask_q   = data[0], data[1]\n","        tok_seq_ctx, attn_mask_ctx = data[2], data[3]\n","        tok_seq_cnt, attn_mask_cnt = data[4], data[5]\n","        \n","        emb_ctx = self.bert_layer(tok_seq_ctx, \n","                                  attention_mask=attn_mask_ctx)[0][:, 0, :]\n","        emb_cnt = self.bert_layer(tok_seq_cnt, \n","                                  attention_mask=attn_mask_cnt)[0][:, 0, :]\n","\n","        ls_ctx = self.ctx_linear1(emb_ctx)\n","        ls_ctx = self.bn_ctx(ls_ctx)\n","        ls_ctx = F.relu(ls_ctx)\n","        \n","        ls_cnt = self.content_linear1(emb_cnt)\n","        ls_cnt = self.bn_cnt(ls_cnt)\n","        ls_cnt = F.relu(ls_cnt)\n","\n","        ls_cat = torch.cat((ls_ctx, ls_cnt), dim=1)\n","        \n","        # Prediction Layers\n","        ls_cat = self.pred_linear1(ls_cat)\n","        ls_cat = self.bn_cat(ls_cat)\n","        ls_cat = F.relu(ls_cat)\n","        return self.pred_linear2(ls_cat)"]},{"cell_type":"markdown","metadata":{"id":"TbrkrVp9unHC"},"source":["## AQAM - Content-Context-Question\n"]},{"cell_type":"code","execution_count":24,"metadata":{"id":"UDvRHzV2unHF","executionInfo":{"status":"ok","timestamp":1678903417812,"user_tz":240,"elapsed":40,"user":{"displayName":"Bill Power","userId":"17299628813846429758"}}},"outputs":[],"source":["# TODO - Update model arch.\n","class AQAM_CCQ(torch.nn.Module):\n","    def __init__(self):\n","        super().__init__()\n","\n","        # Transformer Embedding Layer\n","        self.bert_layer = model_class.from_pretrained(pretrained_weights,    \n","                                                      num_labels = 2,\n","                                                      output_attentions = False,\n","                                                      output_hidden_states = False,\n","                                                      return_dict=False)\n","\n","        # 3 MLP Stacks\n","        self.q_linear1   = Linear(NUM_BERT_FEATURES, HL_QUESTION)\n","        self.ctx_linear1 = Linear(NUM_BERT_FEATURES, HL_CONTEXTS)\n","        self.content_linear1 = Linear(NUM_BERT_FEATURES, HL_CONTENT)\n","        \n","        # Prediction Layers\n","        self.pred_linear1 = Linear(HL_QUESTION+HL_CONTEXTS+HL_CONTENT, HL_PRED)\n","        self.pred_linear2 = Linear(HL_PRED, 1)\n","\n","        # Batch Norms\n","        self.bn_q    = BatchNorm1d(HL_QUESTION)\n","        self.bn_ctx  = BatchNorm1d(HL_CONTEXTS)\n","        self.bn_cnt  = BatchNorm1d(HL_CONTENT) \n","\n","        # self.bn_triple = BatchNorm1d(HL_QUESTION+HL_CONTEXTS+HL_CONTENT)\n","        self.bn_cat  = BatchNorm1d(HL_PRED) \n","\n","    def forward(self, data):\n","        tok_seq_q,   attn_mask_q   = data[0], data[1]\n","        tok_seq_ctx, attn_mask_ctx = data[2], data[3]\n","        tok_seq_cnt, attn_mask_cnt = data[4], data[5]\n","        \n","        emb_q   = self.bert_layer(tok_seq_q,   \n","                                  attention_mask=attn_mask_q)[0][:, 0, :]\n","        emb_ctx = self.bert_layer(tok_seq_ctx, \n","                                  attention_mask=attn_mask_ctx)[0][:, 0, :]\n","        emb_cnt = self.bert_layer(tok_seq_cnt, \n","                                  attention_mask=attn_mask_cnt)[0][:, 0, :]\n","\n","        # The 3 Heads - Question, Context, Content spaces.\n","        ls_q   = self.q_linear1(emb_q)\n","        ls_q   = self.bn_q(ls_q)\n","        ls_q   = F.relu(ls_q)\n","\n","        ls_ctx = self.ctx_linear1(emb_ctx)\n","        ls_ctx = self.bn_ctx(ls_ctx)\n","        ls_ctx = F.relu(ls_ctx)\n","        \n","        ls_cnt = self.content_linear1(emb_cnt)\n","        ls_cnt = self.bn_cnt(ls_cnt)\n","        ls_cnt = F.relu(ls_cnt)\n","\n","        ls_cat = torch.cat((ls_q, ls_ctx, ls_cnt), dim=1)\n","        \n","        # Prediction Layers\n","        ls_cat = self.pred_linear1(ls_cat)\n","        # ls_cat = self.bn_cat(ls_cat)\n","        ls_cat = F.relu(ls_cat)\n","        return self.pred_linear2(ls_cat)"]},{"cell_type":"markdown","metadata":{"id":"h6ilu9ax8bze"},"source":["# Training and Evaluation Method"]},{"cell_type":"code","execution_count":25,"metadata":{"id":"f2D3fYj89Bpz","executionInfo":{"status":"ok","timestamp":1678903417814,"user_tz":240,"elapsed":40,"user":{"displayName":"Bill Power","userId":"17299628813846429758"}}},"outputs":[],"source":["from torch.optim import SGD"]},{"cell_type":"code","execution_count":26,"metadata":{"id":"MaoTTbX0BfNN","executionInfo":{"status":"ok","timestamp":1678903417815,"user_tz":240,"elapsed":38,"user":{"displayName":"Bill Power","userId":"17299628813846429758"}}},"outputs":[],"source":["def binary_acc(y_pred, y_test):\n","  # Where we handle the sigmoid for the BC\n","  y_pred_tag = torch.round(torch.sigmoid(y_pred))\n","  correct_results_sum = (y_pred_tag == y_test).sum().float()\n","  acc = correct_results_sum/float(y_test.shape[0])\n","  return acc"]},{"cell_type":"code","execution_count":27,"metadata":{"id":"ynT43r7n9s2P","executionInfo":{"status":"ok","timestamp":1678903417817,"user_tz":240,"elapsed":38,"user":{"displayName":"Bill Power","userId":"17299628813846429758"}}},"outputs":[],"source":["def train_and_evaluate(model, training_batches, test_set_batches, epochs, cuda_dev):\n","  optimizer = SGD(model.parameters(), lr=0.001, momentum=0.9)\n","  criterion = torch.nn.BCEWithLogitsLoss().to(cuda_dev)\n","\n","  train_accs = []\n","  test_accs  = [[] for _ in test_set_batches]\n","  for epoch in tqdm(range(epochs), unit=\"epoch\"):\n","    model.train()\n","    \n","    batch_accs = []\n","    for batch in training_batches:\n","      batch = tuple(t.to(cuda_dev) for t in batch)\n","      _, _, _, _, _, _, labels = batch\n","\n","      optimizer.zero_grad()\n","      out = model(batch)\n","      loss = criterion(out, labels)\n","      loss.backward()\n","      optimizer.step()\n","      batch_accs.append(binary_acc(out, labels))\n","\n","    train_accs.append(sum(batch_accs)/float(len(batch_accs)))\n","\n","    model.eval()\n","    for t_idx, test_batches in enumerate(test_set_batches):\n","      test_batch_accs = []\n","      for test_batch in test_batches:\n","        test_batch = tuple(t.to(cuda_dev) for t in test_batch)\n","        _, _, _, _, _, _, test_labels = test_batch\n","\n","        test_out = model(test_batch)\n","        test_batch_accs.append(binary_acc(test_out, test_labels))\n","      \n","      test_accs[t_idx].append(sum(test_batch_accs)/float(len(test_batch_accs)))\n","\n","  return train_accs, test_accs, model"]},{"cell_type":"markdown","metadata":{"id":"4F9mZnh3xKZF"},"source":["# Embedding Extraction Method"]},{"cell_type":"markdown","metadata":{"id":"8Yj20aAZxOPt"},"source":["This takes in a model and a dataset, and returns the underlying BERT/LLM embeddings for each part of the input tuple for each item/batch in the dataset. Note - This assumes a structure to the model, or atleast that it contains a LLM layer named \"bert_layer\". More complicated architectures (like ones that use a different LLM for context/content/question) will need a different 'gather' method to pull out the embeddings. "]},{"cell_type":"code","execution_count":28,"metadata":{"id":"zl9uPMYt4CKw","executionInfo":{"status":"ok","timestamp":1678903417818,"user_tz":240,"elapsed":36,"user":{"displayName":"Bill Power","userId":"17299628813846429758"}}},"outputs":[],"source":["def gather_embeddings(model, dataloaders):\n","  model.eval()\n","\n","  embs_cnt     = []\n","  embs_cntctx  = []\n","  embs_cntq    = []\n","  embs_cntctxq = []\n","  agree_flags  = []\n","  for dl in dataloaders:\n","    for batch in dl:\n","      tok_seq_q,   attn_mask_q   = batch[0].to(cuda_dev), batch[1].to(cuda_dev)\n","      tok_seq_ctx, attn_mask_ctx = batch[2].to(cuda_dev), batch[3].to(cuda_dev)\n","      tok_seq_cnt, attn_mask_cnt = batch[4].to(cuda_dev), batch[5].to(cuda_dev)\n","\n","      labels = batch[6].to(cuda_dev)\n","      batch = [b.to(cuda_dev) for b in batch]\n","      with torch.no_grad():\n","        emb_cnt = model.bert_layer(tok_seq_cnt, \n","                                      attention_mask=attn_mask_cnt)[0][:, 0, :]\n","        emb_ctx = model.bert_layer(tok_seq_ctx, \n","                                      attention_mask=attn_mask_ctx)[0][:, 0, :]\n","        emb_q   = model.bert_layer(tok_seq_q,\n","                                      attention_mask=attn_mask_q)[0][:, 0, :]\n","        out = model(batch)\n","        y_pred_tag = torch.round(torch.sigmoid(out))\n","        agree = y_pred_tag == labels\n","\n","      # TODO - Here is where we'll call the full forward pass of the model on\n","      #        the batch, and then generate an agreement vector? flag vector\n","      #        where a_i is 0 if the model disagrees, 1 if it agrees.\n","      # so we get an output, and we want to get the 'labels == output' flags.\n","\n","      embs_cnt.append(emb_cnt.cpu())\n","      embs_cntctx.append(torch.cat([emb_cnt.cpu(), emb_ctx.cpu()], 1))\n","      embs_cntq.append(torch.cat([emb_cnt.cpu(), emb_q.cpu()], 1))\n","      embs_cntctxq.append(torch.cat([emb_cnt.cpu(), emb_ctx.cpu(), emb_q.cpu()], 1))\n","      agree_flags.append(agree.cpu())\n","      # Overkill, but hey, not going OoM on the gpu anymore.\n","      del tok_seq_q\n","      del tok_seq_cnt\n","      del tok_seq_ctx\n","      del attn_mask_q\n","      del attn_mask_cnt\n","      del attn_mask_ctx\n","      del emb_cnt\n","      del emb_ctx\n","      del emb_q\n","      del batch\n","      with torch.no_grad(): # Note to future bill: empty cache only works in a no_grad\n","        torch.cuda.empty_cache()\n","  \n","  return torch.cat(embs_cnt, 0), torch.cat(embs_cntctx, 0), torch.cat(embs_cntq, 0), torch.cat(embs_cntctxq, 0), torch.cat(agree_flags, 0)"]},{"cell_type":"markdown","metadata":{"id":"1UhRSuE9wQHp"},"source":["# Experiment"]},{"cell_type":"markdown","metadata":{"id":"wbxhAQwswYDH"},"source":["These experiments look at the pre/post finetuning embeddings of inputs, and the training and validation accuracy of the fine-tuned model, for 4 different data formulations and models;\n","\n","*   C-Model\n","  * Content-Only\n","  * Just the content embeddings are passed to the prediction layer. \n","*   CC-Model\n","  * Content-Context Embeddings are concatenated and then passed to prediction layers. \n","*   CQ-Model\n","  * Content-Question Embeddings are concatenated and then passed to prediciton layers. \n","*   CCQ-Model\n","  * Content-Context-Question embeddings are concatenated and then passed to prediction layers. \n","\n","\n","Each of the models will be trained on the same dataset, but only act on the relevant parts of the passed in data. This may be a target for future improvements because my gut says it might be a problem with possible conflicting training examples. \n","\n","Each of these trained models is then evaluated using the same set of A3/A2 validation sets, as well as showing their training accuracy on the A3+ data. \n","\n"]},{"cell_type":"code","execution_count":29,"metadata":{"id":"zFmDNG_UheNS","executionInfo":{"status":"ok","timestamp":1678903417820,"user_tz":240,"elapsed":36,"user":{"displayName":"Bill Power","userId":"17299628813846429758"}}},"outputs":[],"source":["# Prepended to image and data pickles before uploading to GCS. \n","RESULTS_NOTE = \"05_filtered_a2a3_removed_bns\""]},{"cell_type":"markdown","metadata":{"id":"ZhqZxzTVHUaH"},"source":["### Dataloaders"]},{"cell_type":"code","execution_count":34,"metadata":{"id":"NWCski_kwUCl","executionInfo":{"status":"ok","timestamp":1678905401887,"user_tz":240,"elapsed":4843,"user":{"displayName":"Bill Power","userId":"17299628813846429758"}}},"outputs":[],"source":["# For training/validating the model\n","# A3_fa_train, A3_fa_test = create_dataloaders(content_a3_fa, \n","#                                              0.2,\n","#                                              balance=True)\n","# A2_fa_train, A2_fa_test = create_dataloaders(content_a2_fa, \n","#                                              0.2, \n","#                                              balance=False)\n","# test_batches = [\n","#   A3_fa_test,\n","#   A2_fa_test\n","# ]\n","\n","# For generating the 'full set' of tSNE embeddings. \n","A3_a, A3_b = create_dataloaders(content_a3_majplus, \n","                                0.5,\n","                                balance=False)\n","A2_a, A2_b = create_dataloaders(content_a2_fa, \n","                                0.5,\n","                                balance=False)"]},{"cell_type":"code","execution_count":30,"metadata":{"id":"pvWhx2TFphfr","executionInfo":{"status":"ok","timestamp":1678903433964,"user_tz":240,"elapsed":16179,"user":{"displayName":"Bill Power","userId":"17299628813846429758"}}},"outputs":[],"source":["# # For training/validating the model\n","A3_fa_train, A3_fa_test = create_dataloaders(content_a3a2_mp, \n","                                             0.2,\n","                                             balance=True)\n","A2_fa_train, A2_fa_test = create_dataloaders(content_a2_fa, \n","                                             0.2, \n","                                             balance=False)\n","test_batches = [\n","  A3_fa_test,\n","  A2_fa_test\n","]\n","\n","# For generating the 'full set' of tSNE embeddings. \n","A23_a, A23_b = create_dataloaders(content_a3a2_mp, \n","                                0.5,\n","                                balance=False)"]},{"cell_type":"code","execution_count":32,"metadata":{"id":"RkM6UKd4xkr7","executionInfo":{"status":"ok","timestamp":1678903447352,"user_tz":240,"elapsed":464,"user":{"displayName":"Bill Power","userId":"17299628813846429758"}}},"outputs":[],"source":["cuda_dev  = torch.device(\"cuda:0\")"]},{"cell_type":"markdown","metadata":{"id":"YBQfX1cKwsyQ"},"source":["## C-Model"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":518},"executionInfo":{"elapsed":21552,"status":"error","timestamp":1678816993611,"user":{"displayName":"Bill Power","userId":"17299628813846429758"},"user_tz":240},"id":"sknYT1CKx307","outputId":"bbcd5ab9-ec7c-4087-839b-1c756090c1ed"},"outputs":[{"data":{"application/vnd.jupyter.widget-view+json":{"model_id":"43b94e735614426b80a26c41d5c7670e","version_major":2,"version_minor":0},"text/plain":["Downloading pytorch_model.bin:   0%|          | 0.00/268M [00:00<?, ?B/s]"]},"metadata":{},"output_type":"display_data"},{"name":"stderr","output_type":"stream","text":["Some weights of the model checkpoint at distilbert-base-uncased were not used when initializing DistilBertModel: ['vocab_projector.bias', 'vocab_transform.bias', 'vocab_projector.weight', 'vocab_layer_norm.bias', 'vocab_transform.weight', 'vocab_layer_norm.weight']\n","- This IS expected if you are initializing DistilBertModel from the checkpoint of a model trained on another task or with another architecture (e.g. initializing a BertForSequenceClassification model from a BertForPreTraining model).\n","- This IS NOT expected if you are initializing DistilBertModel from the checkpoint of a model that you expect to be exactly identical (initializing a BertForSequenceClassification model from a BertForSequenceClassification model).\n"]},{"data":{"application/vnd.jupyter.widget-view+json":{"model_id":"ebc9559b10cc4aeaa359e94619bd2bdd","version_major":2,"version_minor":0},"text/plain":["  0%|          | 0/150 [00:00<?, ?epoch/s]"]},"metadata":{},"output_type":"display_data"},{"ename":"KeyboardInterrupt","evalue":"ignored","output_type":"error","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mKeyboardInterrupt\u001b[0m                         Traceback (most recent call last)","\u001b[0;32m<ipython-input-32-91289ee55929>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m      2\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      3\u001b[0m \u001b[0membeds_a3c_pre\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mgather_embeddings\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0ma3_c_model\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0mA23_a\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mA23_b\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 4\u001b[0;31m train_a3c, test_a3c, a3_c_model = train_and_evaluate(\n\u001b[0m\u001b[1;32m      5\u001b[0m     \u001b[0ma3_c_model\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      6\u001b[0m     \u001b[0mA3_fa_train\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m<ipython-input-26-303b7ef12323>\u001b[0m in \u001b[0;36mtrain_and_evaluate\u001b[0;34m(model, training_batches, test_set_batches, epochs, cuda_dev)\u001b[0m\n\u001b[1;32m     10\u001b[0m     \u001b[0mbatch_accs\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     11\u001b[0m     \u001b[0;32mfor\u001b[0m \u001b[0mbatch\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mtraining_batches\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 12\u001b[0;31m       \u001b[0mbatch\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mtuple\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mto\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mcuda_dev\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0mt\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mbatch\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     13\u001b[0m       \u001b[0m_\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0m_\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0m_\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0m_\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0m_\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0m_\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlabels\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mbatch\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     14\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m<ipython-input-26-303b7ef12323>\u001b[0m in \u001b[0;36m<genexpr>\u001b[0;34m(.0)\u001b[0m\n\u001b[1;32m     10\u001b[0m     \u001b[0mbatch_accs\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     11\u001b[0m     \u001b[0;32mfor\u001b[0m \u001b[0mbatch\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mtraining_batches\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 12\u001b[0;31m       \u001b[0mbatch\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mtuple\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mto\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mcuda_dev\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0mt\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mbatch\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     13\u001b[0m       \u001b[0m_\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0m_\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0m_\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0m_\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0m_\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0m_\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlabels\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mbatch\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     14\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mKeyboardInterrupt\u001b[0m: "]}],"source":["a3_c_model = AQAM_C().to(cuda_dev)\n","\n","embeds_a3c_pre = gather_embeddings(a3_c_model, [A23_a, A23_b])\n","train_a3c, test_a3c, a3_c_model = train_and_evaluate(\n","    a3_c_model,\n","    A3_fa_train, \n","    test_batches,\n","    EPOCHS,\n","    cuda_dev)\n","embeds_a3c_post = gather_embeddings(a3_c_model, [A23_a, A23_b])"]},{"cell_type":"markdown","metadata":{"id":"cZDawadwHEPW"},"source":["## CC-Model"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"zDT6UloYHEPe"},"outputs":[],"source":["a3_cc_model = AQAM_CC().to(cuda_dev)\n","\n","embeds_a3cc_pre = gather_embeddings(a3_cc_model, [A23_a, A23_b])\n","train_a3cc, test_a3cc, a3_cc_model = train_and_evaluate(\n","    a3_cc_model,\n","    A3_fa_train, \n","    test_batches,\n","    EPOCHS,\n","    cuda_dev)\n","embeds_a3cc_post = gather_embeddings(a3_cc_model, [A23_a, A23_b])"]},{"cell_type":"markdown","metadata":{"id":"Js6BLq9CHFNh"},"source":["## CQ-Model"]},{"cell_type":"code","execution_count":35,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":121,"referenced_widgets":["712f16eaf1ee4f1881607bbd79757a02","76c146f1cca346f89a2d8cad99647074","52b085dba0cf4c45877744db6f21b3a7","1e2044d267254838a76f56837e78a757","6a758da40448477393ccbbadb20c3eda","31f44b19754a44d78230820e0b16f6e8","b3bce1a5dbe44413900ecaa9a0306433","5016b7b8196442448d50b1feeac4df59","c90fbd11a032497d8c48e2cb1e04dc95","4046104da28c4f5fb456dcfcb458885f","1e155355565e4d51b85ad11fb806d3e6"]},"id":"z9VrskTbHFNu","executionInfo":{"status":"ok","timestamp":1678909265131,"user_tz":240,"elapsed":3859682,"user":{"displayName":"Bill Power","userId":"17299628813846429758"}},"outputId":"a50b3a97-7539-4b26-94c5-1f39ebfaae14"},"outputs":[{"output_type":"stream","name":"stderr","text":["Some weights of the model checkpoint at distilbert-base-uncased were not used when initializing DistilBertModel: ['vocab_transform.weight', 'vocab_projector.bias', 'vocab_layer_norm.bias', 'vocab_projector.weight', 'vocab_layer_norm.weight', 'vocab_transform.bias']\n","- This IS expected if you are initializing DistilBertModel from the checkpoint of a model trained on another task or with another architecture (e.g. initializing a BertForSequenceClassification model from a BertForPreTraining model).\n","- This IS NOT expected if you are initializing DistilBertModel from the checkpoint of a model that you expect to be exactly identical (initializing a BertForSequenceClassification model from a BertForSequenceClassification model).\n"]},{"output_type":"display_data","data":{"text/plain":["  0%|          | 0/25 [00:00<?, ?epoch/s]"],"application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"712f16eaf1ee4f1881607bbd79757a02"}},"metadata":{}}],"source":["a3_cq_model = AQAM_CQ().to(cuda_dev)\n","\n","embeds_a3cq_pre = gather_embeddings(a3_cq_model, [A3_a, A3_b])\n","train_a3cq, test_a3cq, a3_cq_model = train_and_evaluate(\n","    a3_cq_model,\n","    A3_fa_train, \n","    test_batches,\n","    EPOCHS,\n","    cuda_dev)\n","embeds_a3cq_post = gather_embeddings(a3_cq_model, [A3_a, A3_b])"]},{"cell_type":"markdown","metadata":{"id":"opCy4niXHFzO"},"source":["## CCQ-Model"]},{"cell_type":"code","execution_count":36,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":121,"referenced_widgets":["825eacc0b6164cdb91a4752fc5f9460f","d9c64e5264b348379e4a24bfc682a08d","f85b9017ad524019851e5ef2e5a9eaf2","161b1dbbd36f45ab845a8e93b50f5bd5","5dfb38c6a91c41f1b068173dedd0895f","cb9d4ea5987347e9b7864b883d8509f5","30f94bb6281542cb9a9a6ed115ce0fee","069b4aa6d8dd415e88c4b4d218cf2c6f","46ad5c6006d2421d9a5baf506f748443","142da64fe45942c8aed7c376b9e6cc27","aaa5170953f44696b9bcbb5097f5cfcf"]},"id":"xYUa1B_JHFzV","executionInfo":{"status":"ok","timestamp":1678914941490,"user_tz":240,"elapsed":5676388,"user":{"displayName":"Bill Power","userId":"17299628813846429758"}},"outputId":"764e887f-73e6-4168-bb7a-6a0d341c0490"},"outputs":[{"output_type":"stream","name":"stderr","text":["Some weights of the model checkpoint at distilbert-base-uncased were not used when initializing DistilBertModel: ['vocab_transform.weight', 'vocab_projector.bias', 'vocab_layer_norm.bias', 'vocab_projector.weight', 'vocab_layer_norm.weight', 'vocab_transform.bias']\n","- This IS expected if you are initializing DistilBertModel from the checkpoint of a model trained on another task or with another architecture (e.g. initializing a BertForSequenceClassification model from a BertForPreTraining model).\n","- This IS NOT expected if you are initializing DistilBertModel from the checkpoint of a model that you expect to be exactly identical (initializing a BertForSequenceClassification model from a BertForSequenceClassification model).\n"]},{"output_type":"display_data","data":{"text/plain":["  0%|          | 0/25 [00:00<?, ?epoch/s]"],"application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"825eacc0b6164cdb91a4752fc5f9460f"}},"metadata":{}}],"source":["a3_ccq_model = AQAM_CCQ().to(cuda_dev)\n","\n","embeds_a3ccq_pre = gather_embeddings(a3_ccq_model, [A3_a, A3_b])\n","train_a3ccq, test_a3ccq, a3_ccq_model = train_and_evaluate(\n","    a3_ccq_model,\n","    A3_fa_train, \n","    test_batches,\n","    EPOCHS,\n","    cuda_dev)\n","embeds_a3ccq_post = gather_embeddings(a3_ccq_model, [A3_a, A3_b])"]},{"cell_type":"markdown","metadata":{"id":"Pqj-ZyDqNUQ9"},"source":["## tSNE Dim. Reduction"]},{"cell_type":"code","execution_count":37,"metadata":{"id":"m6GyuO34Nc8Y","executionInfo":{"status":"ok","timestamp":1678914941492,"user_tz":240,"elapsed":43,"user":{"displayName":"Bill Power","userId":"17299628813846429758"}}},"outputs":[],"source":["from sklearn.manifold import TSNE\n","\n","PERPLEX = 25"]},{"cell_type":"code","execution_count":38,"metadata":{"id":"SFmu4VroNx2O","executionInfo":{"status":"ok","timestamp":1678914941493,"user_tz":240,"elapsed":34,"user":{"displayName":"Bill Power","userId":"17299628813846429758"}}},"outputs":[],"source":["# a3_cnt_pre,  _, _, _, a3_cnt_agree_pre  = embeds_a3c_pre\n","# a3_cnt_post, _, _, _, a3_cnt_agree_post = embeds_a3c_post\n","\n","# _, a3_cntctx_pre,  _, _, a3_cntctx_agree_pre  = embeds_a3cc_pre\n","# _, a3_cntctx_post, _, _, a3_cntctx_agree_post = embeds_a3cc_post\n","\n","_, _, a3_cntq_pre, _ , a3_cntq_agree_pre  = embeds_a3cq_pre\n","_, _, a3_cntq_post, _, a3_cntq_agree_post = embeds_a3cq_post\n","\n","_, _, _, a3_cntctxq_pre , a3_cntctxq_agree_pre  = embeds_a3ccq_pre\n","_, _, _, a3_cntctxq_post, a3_cntctxq_agree_post = embeds_a3ccq_post"]},{"cell_type":"code","execution_count":39,"metadata":{"id":"HGxJTp9iPbRS","executionInfo":{"status":"ok","timestamp":1678914941494,"user_tz":240,"elapsed":22,"user":{"displayName":"Bill Power","userId":"17299628813846429758"}}},"outputs":[],"source":["# lde_c_pre = TSNE(n_components=2, \n","#                  learning_rate='auto', \n","#                  init='random', \n","#                  perplexity=PERPLEX).fit_transform(a3_cnt_pre)\n","\n","# lde_c_post = TSNE(n_components=2, \n","#                   learning_rate='auto', \n","#                   init='random', \n","#                   perplexity=PERPLEX).fit_transform(a3_cnt_post)"]},{"cell_type":"code","execution_count":40,"metadata":{"id":"rJ0wAtgLP6uj","executionInfo":{"status":"ok","timestamp":1678914941495,"user_tz":240,"elapsed":17,"user":{"displayName":"Bill Power","userId":"17299628813846429758"}}},"outputs":[],"source":["# lde_cc_pre = TSNE(n_components=2, \n","#                  learning_rate='auto', \n","#                  init='random', \n","#                  perplexity=PERPLEX).fit_transform(a3_cntctx_pre)\n","\n","# lde_cc_post = TSNE(n_components=2, \n","#                   learning_rate='auto', \n","#                   init='random', \n","#                   perplexity=PERPLEX).fit_transform(a3_cntctx_post)"]},{"cell_type":"code","execution_count":41,"metadata":{"id":"tTGUNXAlP62B","executionInfo":{"status":"ok","timestamp":1678914953533,"user_tz":240,"elapsed":12050,"user":{"displayName":"Bill Power","userId":"17299628813846429758"}}},"outputs":[],"source":["lde_cq_pre = TSNE(n_components=2, \n","                 learning_rate='auto', \n","                 init='random', \n","                 perplexity=PERPLEX).fit_transform(a3_cntq_pre)\n","\n","lde_cq_post = TSNE(n_components=2, \n","                  learning_rate='auto', \n","                  init='random', \n","                  perplexity=PERPLEX).fit_transform(a3_cntq_post)"]},{"cell_type":"code","execution_count":42,"metadata":{"id":"2_Cwhs41P6_I","executionInfo":{"status":"ok","timestamp":1678914966137,"user_tz":240,"elapsed":12619,"user":{"displayName":"Bill Power","userId":"17299628813846429758"}}},"outputs":[],"source":["lde_ccq_pre = TSNE(n_components=2, \n","                 learning_rate='auto', \n","                 init='random', \n","                 perplexity=PERPLEX).fit_transform(a3_cntctxq_pre)\n","\n","lde_ccq_post = TSNE(n_components=2, \n","                  learning_rate='auto', \n","                  init='random', \n","                  perplexity=PERPLEX).fit_transform(a3_cntctxq_post)"]},{"cell_type":"markdown","metadata":{"id":"8xq-nOCDNd8F"},"source":["## Plot and Save"]},{"cell_type":"code","execution_count":43,"metadata":{"id":"3JZRGpEjGJMs","executionInfo":{"status":"ok","timestamp":1678914966142,"user_tz":240,"elapsed":21,"user":{"displayName":"Bill Power","userId":"17299628813846429758"}}},"outputs":[],"source":["import pickle"]},{"cell_type":"code","execution_count":44,"metadata":{"id":"Ut5v_dXQGJMv","executionInfo":{"status":"ok","timestamp":1678914968991,"user_tz":240,"elapsed":2865,"user":{"displayName":"Bill Power","userId":"17299628813846429758"}}},"outputs":[],"source":["results_object = [\n","    [lde_cq_pre,  lde_cq_post,  a3_cntq_agree_pre,    a3_cntq_agree_post,    train_a3cq,  test_a3cq,  \"content-question\"],\n","    [lde_ccq_pre, lde_ccq_post, a3_cntctxq_agree_pre, a3_cntctxq_agree_post, train_a3ccq, test_a3ccq, \"content-context-question\"]\n","]\n","\n","results_obj_fn = f\"{RESULTS_NOTE}_raw_results_obj.p\"\n","with open(results_obj_fn, 'wb') as f:\n","  pickle.dump(results_object, f)\n","\n","upload_file_to_gcs(results_obj_fn, f\"{RESULTS_GCS_DIR}/{results_obj_fn}\")"]},{"cell_type":"code","execution_count":45,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":1000},"id":"XWTfLg3sNgu3","executionInfo":{"status":"ok","timestamp":1678914975172,"user_tz":240,"elapsed":6194,"user":{"displayName":"Bill Power","userId":"17299628813846429758"}},"outputId":"44a66454-01a7-445d-c524-6f810f6b0e1b"},"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 1080x1080 with 12 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"light"}}],"source":["import matplotlib.pyplot as plt\n","from matplotlib.colors import ListedColormap\n","%matplotlib notebook\n","%matplotlib inline\n","\n","MIN_Y_ACC = 0.60\n","MAX_Y_ACC = 1.0\n","Y_ACC_LIM = (MIN_Y_ACC, MAX_Y_ACC)\n","\n","CUTOFF = 50\n","\n","fig, axis = plt.subplots(4, 3) # 4 Rows, with 3 plots each. \n","\n","fig.set_figwidth(15)\n","fig.set_figheight(15)\n","\n","fig.tight_layout(pad=3)\n","\n","acc_labels = [\"A3M+ Train\", \"A3M+ Test\", \"A2 FA Test\"]\n","acc_colors = [\"tab:red\", \"tab:green\", \"tab:blue\"]\n","\n","agree_colors = ListedColormap([\"red\", \"blue\"])\n","\n","def plot_row(lde_pre, lde_post, lde_pre_agree, lde_post_agree, train_acc, \n","             test_accs, data_label, row_n, cpu=True):\n","  x_pre,  y_pre  = np.split(lde_pre, 2, axis=1)\n","  x_post, y_post = np.split(lde_post, 2, axis=1)\n","\n","  # pre-finetuning tsne scatterplot\n","  axis[row_n, 0].scatter(x_pre, y_pre, c=lde_pre_agree, cmap=agree_colors, marker=\".\")\n","  axis[row_n, 0].set_title(f\"{data_label} embeddings pre\")\n","\n","  # post-finetuning tsne scatterplot\n","  axis[row_n, 1].scatter(x_post, y_post,  c=lde_post_agree, cmap=agree_colors, marker=\".\")\n","  axis[row_n, 1].set_title(f\"{data_label} embeddings post\")\n","\n","  # training and test set acc's by epoch.\n","  acc_data_set = [train_acc]\n","  acc_data_set.extend(test_accs)\n","  axis[row_n, 2].set(ylim=Y_ACC_LIM)\n","  for l, test, color in zip(acc_labels, acc_data_set, acc_colors):\n","    if cpu: \n","      test = [i.cpu() for i in test]\n","    axis[row_n, 2].plot(test[:CUTOFF], label=f\"{l}\", color=color)\n","  axis[row_n, 2].set_title(f\"{data_label} acc\")\n","  axis[row_n, 2].legend(\"bottom left\")\n","\n","\n","# plot_row(lde_c_pre,   lde_c_post,   a3_cnt_agree_pre,     a3_cnt_agree_post, train_a3c,   test_a3c,   \"content only\", 0)\n","# plot_row(lde_cc_pre,  lde_cc_post,  a3_cntctx_agree_pre,  a3_cntctx_agree_post,  train_a3cc,  test_a3cc,  \"content-context\", 1)\n","plot_row(lde_cq_pre,  lde_cq_post,  a3_cntq_agree_pre,    a3_cntq_agree_post,  train_a3cq,  test_a3cq,  \"content-question\", 2)\n","plot_row(lde_ccq_pre, lde_ccq_post, a3_cntctxq_agree_pre, a3_cntctxq_agree_post, train_a3ccq, test_a3ccq, \"content-context-question\", 3)\n","\n","\n","plt_fn = f\"{RESULTS_NOTE}_full_comparison.png\"\n","plt.savefig(plt_fn)\n","plt.show()\n","\n","upload_file_to_gcs(plt_fn, f\"{RESULTS_GCS_DIR}/{RESULTS_NOTE}_full_comparison.png\")"]}],"metadata":{"accelerator":"GPU","colab":{"collapsed_sections":["YuzMQZmetiR7","TBwBOc1LJWSS","YEniTxLUPL-K","LOr21JIPpm8I","rPCF7MZNzOAT","BEHErFubuNSt","QpIXGQzpuh3L","OcCkIPGoumeR","h6ilu9ax8bze","4F9mZnh3xKZF","YBQfX1cKwsyQ","cZDawadwHEPW","opCy4niXHFzO","Pqj-ZyDqNUQ9","8xq-nOCDNd8F"],"machine_shape":"hm","toc_visible":true,"provenance":[],"authorship_tag":"ABX9TyMlsatIaWvD3yb7mAsL2yV2"},"gpuClass":"standard","kernelspec":{"display_name":"Python 3","name":"python3"},"language_info":{"name":"python"},"widgets":{"application/vnd.jupyter.widget-state+json":{"e49417381c674f629e16edd7608a95c6":{"model_module":"@jupyter-widgets/controls","model_name":"HBoxModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HBoxModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HBoxView","box_style":"","children":["IPY_MODEL_8e300090a00643c08f92831904e8c789","IPY_MODEL_4c5ed9bcee784f1aace376e8393273ab","IPY_MODEL_c075b6710a7847b18591e15b3ab2e97f"],"layout":"IPY_MODEL_a9d3c592873443a49c2f4db459efedb8"}},"8e300090a00643c08f92831904e8c789":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_4df5eb4ef66d4967a4a34a429b4ccf65","placeholder":"​","style":"IPY_MODEL_f4551b89e778494189f0161592919dfd","value":"Downloading (…)solve/main/vocab.txt: 100%"}},"4c5ed9bcee784f1aace376e8393273ab":{"model_module":"@jupyter-widgets/controls","model_name":"FloatProgressModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"FloatProgressModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"ProgressView","bar_style":"success","description":"","description_tooltip":null,"layout":"IPY_MODEL_c0d8f20485de4cef81f8612825e46499","max":231508,"min":0,"orientation":"horizontal","style":"IPY_MODEL_b78547e08b43445b8d166232e9e94082","value":231508}},"c075b6710a7847b18591e15b3ab2e97f":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_88285892e65d4a93a79a350d03e916f0","placeholder":"​","style":"IPY_MODEL_3ca4bccd227f4c9d8bb65273121af9a4","value":" 232k/232k [00:00&lt;00:00, 335kB/s]"}},"a9d3c592873443a49c2f4db459efedb8":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"4df5eb4ef66d4967a4a34a429b4ccf65":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"f4551b89e778494189f0161592919dfd":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}},"c0d8f20485de4cef81f8612825e46499":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"b78547e08b43445b8d166232e9e94082":{"model_module":"@jupyter-widgets/controls","model_name":"ProgressStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"ProgressStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","bar_color":null,"description_width":""}},"88285892e65d4a93a79a350d03e916f0":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"3ca4bccd227f4c9d8bb65273121af9a4":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}},"1c9bd1e809cb468bb4cb8f124c352c08":{"model_module":"@jupyter-widgets/controls","model_name":"HBoxModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HBoxModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HBoxView","box_style":"","children":["IPY_MODEL_2f6ebb847aab471c98abe6374afdc1c7","IPY_MODEL_1057fc115e0141f69bc3715abfef701c","IPY_MODEL_4a4a40a62c8a44798f2662497c5ac3fc"],"layout":"IPY_MODEL_1b81dd95366c4ebd96f66715d0073fe2"}},"2f6ebb847aab471c98abe6374afdc1c7":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_8d80b1be153741cb94ecc4669b0ecb0c","placeholder":"​","style":"IPY_MODEL_992c63b94b244a138eafe5474c294ad9","value":"Downloading (…)okenizer_config.json: 100%"}},"1057fc115e0141f69bc3715abfef701c":{"model_module":"@jupyter-widgets/controls","model_name":"FloatProgressModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"FloatProgressModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"ProgressView","bar_style":"success","description":"","description_tooltip":null,"layout":"IPY_MODEL_85b9fd0d931848e2a7aee36b4f9634cf","max":28,"min":0,"orientation":"horizontal","style":"IPY_MODEL_5ab1be39558540a4a47bb659701f8645","value":28}},"4a4a40a62c8a44798f2662497c5ac3fc":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_c37ad664943f4b1eb3ac7e759e3e7e15","placeholder":"​","style":"IPY_MODEL_79b58bb63e844eb78b25202c75ebbbf8","value":" 28.0/28.0 [00:00&lt;00:00, 1.62kB/s]"}},"1b81dd95366c4ebd96f66715d0073fe2":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"8d80b1be153741cb94ecc4669b0ecb0c":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"992c63b94b244a138eafe5474c294ad9":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}},"85b9fd0d931848e2a7aee36b4f9634cf":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"5ab1be39558540a4a47bb659701f8645":{"model_module":"@jupyter-widgets/controls","model_name":"ProgressStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"ProgressStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","bar_color":null,"description_width":""}},"c37ad664943f4b1eb3ac7e759e3e7e15":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"79b58bb63e844eb78b25202c75ebbbf8":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}},"64187ea7359a4e0a8dc2da54f4cf9281":{"model_module":"@jupyter-widgets/controls","model_name":"HBoxModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HBoxModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HBoxView","box_style":"","children":["IPY_MODEL_4cd05fd8b8f24d109b28c178b5f27451","IPY_MODEL_3302367c81c84e9090f4c96b34376e94","IPY_MODEL_b1fda3cf48314a96bc5ed2fefa9eb5d5"],"layout":"IPY_MODEL_bb4b061198c94dad81fe3ba98ed84db5"}},"4cd05fd8b8f24d109b28c178b5f27451":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_e22e79f55ea24bddbc65efcb01958c2c","placeholder":"​","style":"IPY_MODEL_624d4e7164094270bc9096c21c828474","value":"Downloading (…)lve/main/config.json: 100%"}},"3302367c81c84e9090f4c96b34376e94":{"model_module":"@jupyter-widgets/controls","model_name":"FloatProgressModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"FloatProgressModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"ProgressView","bar_style":"success","description":"","description_tooltip":null,"layout":"IPY_MODEL_6ef5b77bce774ffdb2a80a513ebe09d4","max":483,"min":0,"orientation":"horizontal","style":"IPY_MODEL_b27dd13cbcc141f2a6c420b2b592dbf4","value":483}},"b1fda3cf48314a96bc5ed2fefa9eb5d5":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_5715fb148bb34eb2bfd92510fdccbf33","placeholder":"​","style":"IPY_MODEL_bcd530ae724f4018852c9889ef1feaca","value":" 483/483 [00:00&lt;00:00, 26.6kB/s]"}},"bb4b061198c94dad81fe3ba98ed84db5":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"e22e79f55ea24bddbc65efcb01958c2c":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"624d4e7164094270bc9096c21c828474":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}},"6ef5b77bce774ffdb2a80a513ebe09d4":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"b27dd13cbcc141f2a6c420b2b592dbf4":{"model_module":"@jupyter-widgets/controls","model_name":"ProgressStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"ProgressStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","bar_color":null,"description_width":""}},"5715fb148bb34eb2bfd92510fdccbf33":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"bcd530ae724f4018852c9889ef1feaca":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}},"712f16eaf1ee4f1881607bbd79757a02":{"model_module":"@jupyter-widgets/controls","model_name":"HBoxModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HBoxModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HBoxView","box_style":"","children":["IPY_MODEL_76c146f1cca346f89a2d8cad99647074","IPY_MODEL_52b085dba0cf4c45877744db6f21b3a7","IPY_MODEL_1e2044d267254838a76f56837e78a757"],"layout":"IPY_MODEL_6a758da40448477393ccbbadb20c3eda"}},"76c146f1cca346f89a2d8cad99647074":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_31f44b19754a44d78230820e0b16f6e8","placeholder":"​","style":"IPY_MODEL_b3bce1a5dbe44413900ecaa9a0306433","value":"100%"}},"52b085dba0cf4c45877744db6f21b3a7":{"model_module":"@jupyter-widgets/controls","model_name":"FloatProgressModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"FloatProgressModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"ProgressView","bar_style":"success","description":"","description_tooltip":null,"layout":"IPY_MODEL_5016b7b8196442448d50b1feeac4df59","max":25,"min":0,"orientation":"horizontal","style":"IPY_MODEL_c90fbd11a032497d8c48e2cb1e04dc95","value":25}},"1e2044d267254838a76f56837e78a757":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_4046104da28c4f5fb456dcfcb458885f","placeholder":"​","style":"IPY_MODEL_1e155355565e4d51b85ad11fb806d3e6","value":" 25/25 [1:02:55&lt;00:00, 150.88s/epoch]"}},"6a758da40448477393ccbbadb20c3eda":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"31f44b19754a44d78230820e0b16f6e8":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"b3bce1a5dbe44413900ecaa9a0306433":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}},"5016b7b8196442448d50b1feeac4df59":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"c90fbd11a032497d8c48e2cb1e04dc95":{"model_module":"@jupyter-widgets/controls","model_name":"ProgressStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"ProgressStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","bar_color":null,"description_width":""}},"4046104da28c4f5fb456dcfcb458885f":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"1e155355565e4d51b85ad11fb806d3e6":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}},"825eacc0b6164cdb91a4752fc5f9460f":{"model_module":"@jupyter-widgets/controls","model_name":"HBoxModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HBoxModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HBoxView","box_style":"","children":["IPY_MODEL_d9c64e5264b348379e4a24bfc682a08d","IPY_MODEL_f85b9017ad524019851e5ef2e5a9eaf2","IPY_MODEL_161b1dbbd36f45ab845a8e93b50f5bd5"],"layout":"IPY_MODEL_5dfb38c6a91c41f1b068173dedd0895f"}},"d9c64e5264b348379e4a24bfc682a08d":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_cb9d4ea5987347e9b7864b883d8509f5","placeholder":"​","style":"IPY_MODEL_30f94bb6281542cb9a9a6ed115ce0fee","value":"100%"}},"f85b9017ad524019851e5ef2e5a9eaf2":{"model_module":"@jupyter-widgets/controls","model_name":"FloatProgressModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"FloatProgressModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"ProgressView","bar_style":"success","description":"","description_tooltip":null,"layout":"IPY_MODEL_069b4aa6d8dd415e88c4b4d218cf2c6f","max":25,"min":0,"orientation":"horizontal","style":"IPY_MODEL_46ad5c6006d2421d9a5baf506f748443","value":25}},"161b1dbbd36f45ab845a8e93b50f5bd5":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_142da64fe45942c8aed7c376b9e6cc27","placeholder":"​","style":"IPY_MODEL_aaa5170953f44696b9bcbb5097f5cfcf","value":" 25/25 [1:32:59&lt;00:00, 223.29s/epoch]"}},"5dfb38c6a91c41f1b068173dedd0895f":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"cb9d4ea5987347e9b7864b883d8509f5":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"30f94bb6281542cb9a9a6ed115ce0fee":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}},"069b4aa6d8dd415e88c4b4d218cf2c6f":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"46ad5c6006d2421d9a5baf506f748443":{"model_module":"@jupyter-widgets/controls","model_name":"ProgressStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"ProgressStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","bar_color":null,"description_width":""}},"142da64fe45942c8aed7c376b9e6cc27":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"aaa5170953f44696b9bcbb5097f5cfcf":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}}}}},"nbformat":4,"nbformat_minor":0}